---
title: "CH4--0415"
author: "YI XUAN HSU"
date: "2020/4/17"
output: html_document
---

## 4.1 選取元素

# 4.1.3 連鎖選取

```{r}
listExample <- 
  list(
    student="小明",       #位置1--student
    `學期`=list(       #位置2--學期
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
          )
        ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
          )
        )
      )
    )

str(listExample)
```

```{r}
#用位置選：
length(listExample)    #有多少位置可選

listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
```

```{r}
#用名字選：
get1 <- listExample[["學期"]]    #拿出來
get1 <- listExample$`學期`    #拿出來

get2 <- listExample["學期"]    #只留下

str(get1)

str(get2)
```

*EX：get1 取出 "teacher"
```{r}
get1$`108-1` -> get1_layer1 ; get1_layer1 #layer1 只有一個未命名物件
str(get1_layer1)

get1_layer1[[1]] -> get1_layer2 ; get1_layer2 #layer2 有三個命名物件
str(get1_layer2)

get1_layer2$teacher
```

```{r}
#使用'連鎖選取'從 get1 取出 "teacher"

get1 <- listExample[["學期"]]    #拿出來  # 1
get1$`108-1` -> get1_layer1    #2
get1_layer1[[1]] -> get1_layer2    #3
get1_layer2$teacher    #4


listExample[["學期"]]$`108-1`[[1]]$teacher
               #1       #2     #3    #4
```


*EX：get2 取出 "teacher"
```{r}
get2[["學期"]] -> get2_layer1  #等同於get2[[1]],layer1有兩個命名物件
str(get2_layer1)

get2_layer1$`108-1` -> get2_layer2    #layer2 只有一個未命名物件
str(get2_layer2)

get2_layer2[[1]] -> get2_layer3    #layer3 有三個命名物件
str(get2_layer3)

get2_layer3$teacher
```

```{r}
#使用'連鎖選取'從 get2 取出 "teacher"

get2 <- listExample["學期"]    #只留下  #1
get2[["學期"]] -> get2_layer1    #2
get2_layer1$`108-1` -> get2_layer2    #3
get2_layer2[[1]] -> get2_layer3    #4
get2_layer3$teacher    #5


listExample["學期"][["學期"]]$`108-1`[[1]]$teacher
              #1    #2,=[[1]]   #3    #4    #5
```

=>比較get1和get2，發現get2中的步驟#1其實是多餘/沒必要的
=>表示如果要取的元素值只有'1個'的話，一定要用[[兩個中括號]]；
  [1個中括號]是保留給要取多個元素值時使用


*list應用：
atomic vector其實也可以像list對元素命名，然而用名稱取元素值在atomic vector：
1. 只能用[ ]或[[ ]]
2. 不能用$  ($只適用在list)
```{r}
vector1 <- c(a=1,b=3,c=4)
vector1[["a"]]
vector1[c("a","c")]
vector1$a    #不能用

list1 <- list(a=1,b=3,c=4)
list1[["a"]]
list1[c("a","c")]
list1$a
```


*EX：今明兩日台北市、新北市氣溫
```{r}
today <- list(
  list("台北市",
       c(highest_temp = 25),    #atomic vector with named element
       c(lowest_temp = 18)
       ),
  list("新北市",
       c(highest_temp = 24),
       c(lowest_temp = 15)
       )
  )

str(today)

today[[1]][[2]]   #選擇物件元素
                  #layer1有兩個未命名物件，選第一個-->今日台北市
                  #layer2有三個未命名物件，選第二個-->highest_temp
```

```{r}
tomorrow <- list(
  list("台北市",
       c(highest_temp = 25),
       c(lowest_temp = 18)
       ),
  list("新北市",
       c(highest_temp = 24),
       c(lowest_temp = 15)
       )
  )

str(tomorrow)

tomorrow[[2]][[3]]  #選擇物件元素
                    #layer1有兩個未命名物件，選第二個-->明日新北市
                    #layer2有三個未命名物件，選第三個-->lowest_temp
```

```{r}
weather <- list(today,tomorrow)

str(weather)
```

=> 以下選法行得通嗎？
```{r}
weather[[1]][[2]]$highest_temp    #今天/新北市/highest_temp
weather[[2]][[2]]$highest_temp    #明天/新北市/highest_temp

#不行，atomic vector不適用 $ 的命名選取方式
```

=> 需修改成下面的形式
```{r}
today <- list(
  list("台北市",
       highest_temp= c(highest_temp = 25),
       lowest_temp= c(lowest_temp = 18)
       ),          #保留vector後面的命名，使名稱可以顯示於彈出視窗上
  list("新北市",
       highest_temp= c(highest_temp = 24),
       lowest_temp= c(lowest_temp = 15)
       )
  )

str(today)

tomorrow <- list(
  list("台北市",
       highest_temp= c(highest_temp = 25),
       lowest_temp= c(lowest_temp = 18)
       ),
  list("新北市",
       highest_temp= c(highest_temp = 24),
       lowest_temp= c(lowest_temp = 15)
       )
  )

str(tomorrow)
```

```{r}
today[[1]]$highest_temp    #選擇物件元素，等同於[[1]][[2]]
                           #因為有用list的方式命名，所以可用'$'替代

tomorrow[[2]]$lowest_temp
```


## 4.2 新增/替換/刪除元素

*元素提取[.],[[.]],$.也可用來進行元素'值'的修改與新增，使用方法為：

1. obj[.] <- value
2. obj[[.]] <- value
3. obj$. <- value

*若.所指定的元素不存在，則為「新增」
*若.所指定的元素存在，則為「修改」

```{r}
a <- c("1","b","TRUE")
a

a[[2]] <- "c"    #第二個 元素存在：替換
a[[4]] <- "7"    #第四個 元素不存在：增加
a[c(5,6)] <- c("J", "K")    #使用[一個括號]來一次選取多個元素
a
```

```{r}
#1. 增加一個“Johnson”使用[[.]] <-

a[[7]] <- "Johnson"
a

#2. 使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”

a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a                #表 a <- c(C(原本的7個值...),Mary)  
                 # Mary 這個值會無限疊代/增生
```


```{r}
library(lubridate)

list1 <- 
  list(
    list(
      name="Jack",
      birthday=ymd("1998-03-21"),
      status=c(height=177, weight=80)
    )
  )

str(list1)
```

```{r}
#更改日期
list1[[1]]$birthday <- ymd("1997-03-21")

str(list1)

#新增資料
list1[[2]] <- list(
  name="Mary",
  birthday=ymd("1998-08-24")
)

str(list1)
```

```{r}
#替Mary依Jack的記錄方式增加身高163，體重45
list1[[2]]$status <- c(height=163, weight=45)

str(list1)

#將Jack的身高改成176
list1[[1]]$status <- c(height=176, weight=80)
list1[[1]]$status[["height"]] <- 176    #兩種表達方式都可以

str(list1)
```


*使用[.] <-    #[一個括號]
由於[.]會保留'母層'結構，所以 <- 右側要使用和'母層'相同的型態設定：

1. 母層若為list，則需用list(...)方式增加
2. 母層若為atomic vector，則用c(...)方式增加

```{r}
list1[[1]][["age"]] <- 21

str(list1)

list1[[2]]["age"] <- list(21)    #母層結構為list

str(list1)

#改變「一個」元素值時，使用[[ ]]比較不會錯
```

```{r}
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)
                                           #母層結構為list
str(list1)
```


*EX：
```{r}
listExample <- 
  list(
    student="小明",
    `學期`=list(
      `108-1`=list(
        list(
          name="個體經濟學",
          teacher="Alice",
          grade=85
        )
      ),
      `108-2`=list(
        list(
          name="總體經濟學",
          teacher="Mark",
          grade=78
        )
      )
    )
  )

length(listExample)    #有多少位置可選
str(listExample)
```

1. 108-1新增一個“產業經濟學”。
2. 產業經濟學，同時加上教師Wen及成績88
```{r}
#解法一：
str(listExample)

listExample$`學期`$`108-1`[[2]] <-list(
  name="產業經濟學"
  )

str(listExample)

listExample$`學期`$`108-1`[[2]][c("teacher","grade")] <- list(
  "Wen",
  88
  )

str(listExample)
```

```{r}
#解法二：
listExample$`學期`$`108-1`[[2]] <- list(
  name="產業經濟學",
  teacher="Wen",
  grade=88
  )

str(listExample)
```


*刪除可以使用[- c(數字位置)]    #負數符號-->只能使用在數值形式

1. 只能['一個'中括號] （[[.]]不能接受負數值）
2. 只能用負數值，不能用元素名稱
3. 刪除完的值要回存才算真的刪除

```{r}
print(a)

a[-c(1,3)]
a[c(-2)]
#在沒有確定刪除上列指令的位置1,3情況下，此指令只會暫時刪除掉原位置2

print(a)

a[-c(1,3)] -> a    #要回存才算真的刪除
a[-c(2)] -> a  #這時刪除的位置2是上述指令刪除完後，重新再排列的位置2

print(a)
```


*EX：
```{r}
library(lubridate)

list1 <- list(
  list(
    name="Jack",
    birthday=ymd("1998-03-21"),
    status=c(height=177, weight=80)
    ),
  list(
    name="Mary",
    birthday=ymd("1998-08-24"),
    status=c(height=163, weight=45),
    age=21,
    bloodType="AB"
    )
  )

str(list1)
```

1. 刪除Jack的status.
2. 刪除Mary的status, blookType.
```{r}
list1[[1]][-3] -> list1[[1]] #刪除只用[一個中括號]
                             #只針對一小部分做刪除，"小心回存的位置"
str(list1)

list1[[2]][-c(3,5)] -> list1[[2]]
str(list1)
```


* list元素要刪除時也可以用 [.] <- NULL, [[.]] <- NULL, $. <- NULL

```{r}
str(list1)

list1[[2]][c(1,2)] <- NULL
#用NULL的方式刪除list元素的時候'不用回存'就能真正把原本的list值改掉
#若不用NULL來刪除list元素的話，要打成list1[[2]][-c(1,2)]->list1[[2]]

str(list1)
```


*EX：
```{r}
library(jsonlite)
fromJSON("https://data.ntpc.gov.tw/od/data/api/54DDDC93-589C-4858-9C95-18B2046CC1FC?$format=json", simplifyDataFrame = F) -> newTaipeiYouBike
```







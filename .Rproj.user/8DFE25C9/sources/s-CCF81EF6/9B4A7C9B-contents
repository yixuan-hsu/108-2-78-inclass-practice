---
title: "homework 5"
output: html_document
params:
  studentName: "許苡萱"
  studentID: "410774250"
editor_options: 
  chunk_output_type: console
---

# 注意事項

存檔與填寫注意事項：

假設你叫王小明，學號41078392。

  1. 有些同學可能家裡電腦不是utf-8設定，為防萬一，請於存檔時使用：File > save with enconding, 然後選utf-8

  2. 本文檔開始的Frontmatter中，studentID（即key）其value目前為"你的學號"，以上面學號為例則必需改成"41078392"；而studentName（key）其value目前為"你的名字"，以上面名字為例則必需改成"王小明"
  
> 每次作業滿分10分：有寫作業於期限內上傳得3分，剩餘7分依作業準確率決定最後得分多寡，除非該題另有規定。

> 前述存檔與frontmatter要求缺任何一個則扣1分。

請先執以下code chunk, 引入所需packages，答案禁止引用其他套件（Package）。
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); 
```

# 題目

## 1 平均身高  
以下是來自政府開放資料平台的台灣[學生5-16歲身高平均值](https://data.gov.tw/dataset/6283)
```{r data1}
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
```

### 1.1  類別調整
請將「學年度」及「年齡」都改成ordered factor, levels順序以其文字數值從小排到大。( 答案物件studentHeights本身)

```{r ans11}
studentHeights$`學年度` <- factor(
  studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))),ordered=TRUE
  )

studentHeights$`年齡` <- factor(
  studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))),ordered=TRUE
  )

class(studentHeights$`學年度`)
class(studentHeights$`年齡`)

levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)

studentHeights
```

### 1.2 年齡層
請在studentHeights新增「年齡層」元素（class ordered factor），其類別排序為6-8 < 9-12 < 13-15三類年齡層。
```{r ans12}
studentHeights$`年齡層` <- factor(
  studentHeights$`年齡層`,ordered=TRUE
  )

level_age_names <- levels(studentHeights$`年齡層`)
level_age_names

start_Ages <- stringr::str_extract(level_age_names,"^[0-9]+")
start_Ages <- as.integer(start_Ages)
names(start_Ages) <- level_age_names

sort(start_Ages) -> start_Ages
start_Ages

studentHeights$`年齡層` <- factor(
  studentHeights$`年齡層`,level=names(start_Ages)
  )
levels(studentHeights$`年齡層`)
class(studentHeights$`年齡層`)

studentHeights$`年齡層`
```

### 1.3 各年齡層平均身高
請創造一個named numeric vector, averageHeightByGroup (class numeric, length=3) 其值分別是三組年齡層各自所包含年齡下不分性別身高的平均（即第一個值是所有6-8歲不分學年度、不分性別身高（總計身高）的平均，再來是9-12歲，最後是13-15歲），而此vector的元素名稱也分別是"6-8", "9-12", "13-15" (hint: 數值向量x元素平均, 可用mean(x)求得； 這題也考驗同學組合數個「要不要」向量`pick_XXX`)

```{r ans13}
char_age <- as.character(studentHeights$`年齡層`)
char_age

average_a <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "總計" & 
                      char_age == "6-8"])
average_a

average_b <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "總計" & 
                      char_age == "9-12"])
average_b

average_c <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "總計" & 
                      char_age == "13-15"])
average_c

averageHeightByGroup <- c("6-8"= average_a,
                          "9-12"= average_b,
                          "13-15"= average_c)

class(averageHeightByGroup)
length(averageHeightByGroup)

averageHeightByGroup
```

### 1.4 各年齡層下性別身高差異
請創造一個named numeric vector, heightDifferenceByGroup (class numeric, length=3) 其值分別是三組年齡層各自所包含年齡下的「男性平均身高」減去「女性平均身高」（即第一個值是所有6-8歲不分學年度的男女身高平均差異，再來是9-12歲，最後是13-15歲），而此vector的元素名稱也分別是"6-8", "9-12", "13-15" (hint: 數值向量x元素平均, 可用mean(x)求得)

```{r ans14}
average_male_a <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "男" & 
                      char_age == "6-8"])
average_female_a <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "女" & 
                      char_age == "6-8"])
average_male_a
average_female_a

average_male_b <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "男" & 
                      char_age == "9-12"])
average_female_b <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "女" & 
                      char_age == "9-12"])
average_male_b
average_female_b

average_male_c <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "男" & 
                      char_age == "13-15"])
average_female_c <- mean(studentHeights$`平均身高`
                  [studentHeights$`類別` == "女" & 
                      char_age == "13-15"])
average_male_c
average_female_c

a_minus <- average_male_a - average_female_a
a_minus
b_minus <- average_male_b - average_female_b
b_minus
c_minus <- average_male_c - average_female_c
c_minus

heightDifferenceByGroup <- c("6-8"= a_minus,
                          "9-12"= b_minus,
                          "13-15"= c_minus)

class(heightDifferenceByGroup)
length(heightDifferenceByGroup)

heightDifferenceByGroup
```


## 2 各學系

```{r data2}
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
```

### 2.1 改系名
請寫下「一個」字串的regex字串向量，稱之為realEstateRegex （class character, length=1）,

```{r ans21}
differentMajors

realEstateRegex <- "不動產?與?城?鄉?環?境?學?系"

class(realEstateRegex)
length(realEstateRegex)

realEstateRegex
```

使得執行以下程序後differentMajors裡屬「不動產與城鄉環境學系（不管何種寫法）」的都會變成"不動系"。這裡regex還有一個限制考驗，就是：「不動產與城鄉環境學系」的十個字都只會出現一次（所以不能寫"(不動系|不動產系|...)"之類的——不、動、系三字出現二次，違規）。(hint: 這題使用regex quantifier裡的`?`會容易很多)
```{r}
str_replace(differentMajors,realEstateRegex,"不動系")
```



### 2.2 factor levels
直接將differentMajors轉成factor, 並將它的levels存在currentLevels（class character）。（雖然同系有不同叫法而形成好幾個levels，這題不用去整併它。）
```{r ans22}
currentLevels <- levels(as.factor(differentMajors))

class(currentLevels)

currentLevels
```


### 2.3 商學院
請寫下「一個」字串的regex（class character, length=1）稱之為bSchoolRegex,

```{r ans23}
currentLevels

bSchoolRegex <- 
  "(休閒?與?運動?管?理?學?系|金融與?合?作?經?營?學?系)"

class(bSchoolRegex)
length(bSchoolRegex)

bSchoolRegex
```

使得執行以下程序後currentLevels裡屬商學院的系都會變成"商學院"。（其實此題也可以要求第一題的限制，但怕難度太高這題則不設「系名字元不重覆」的限制）
```{r}
str_replace(currentLevels,bSchoolRegex,"商學院")
```



### 2.4 改所有系名
請統一differentMajors裡的系名如下：
  休運系，金融系，經濟系，社會系，社工系，公行系，不動系
  
這題不限方法或regex使用次數。（答案物件differentMajors本身, class factor）
```{r ans24}
currentLevels
differentMajors <- as.factor(differentMajors)

lsm_regex <- "休閒?與?運動?管?理?學?系"
differentMajors <- str_replace(differentMajors,lsm_regex,"休運系")

fcm_regex <- "金融與?合?作?經?營?學?系"
differentMajors <- str_replace(differentMajors,fcm_regex,"金融系")

eco_regex <- "經濟學?系"
differentMajors <- str_replace(differentMajors,eco_regex,"經濟系")

soc_regex <- "社會學?系"
differentMajors <- str_replace(differentMajors,soc_regex,"社會系")

sw_regex <- "社會?工作?學?系"
differentMajors <- str_replace(differentMajors,sw_regex,"社工系")

pap_regex <- "公共?行政?暨?政?策?學?系"
differentMajors <- str_replace(differentMajors,pap_regex,"公行系")

rebe_regex <- "不動產?與?城?鄉?環?境?學?系"
differentMajors <- str_replace(differentMajors,rebe_regex,"不動系")

class(differentMajors)

differentMajors
```


### 2.5 學院factor
另創一個school物件（class factor），它的每個元素對應differentMajors學系所屬之學院：

  * 商學院：包含休運系，金融系
  
  * 社科院：包含經濟系，社會系，社工系
  
  * 公共事務學院： 包含公行系，不動系

即levels(school)會有「公共事務學院、商學院、社科院」。

```{r ans25}
bus <- "(休運系|金融系)"
school <- str_replace(differentMajors,bus,"商學院")

ss <- "(經濟系|社會系|社工系)"
school <- str_replace(school,ss,"社科院")

pa <- "(公行系|不動系)"
school <- str_replace(school,pa,"公共事務學院")

school <- as.factor(school)
class(school)
levels(school)

school
```


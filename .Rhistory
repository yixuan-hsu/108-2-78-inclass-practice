str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<- factor(`全宗名編號`)
`年`<- str_extract(data228$`檔號`,"(?<=/)[:alnum:]{4}(?=/)")
`年`<- as.integer(`年`)
class(`全宗名編號`)
class(`年`)
data228[["全宗名編號"]]<- `全宗名編號`
data228[["年"]]<- `年`
data228[c("全宗名編號","年")]
data_1 <- data228$`附註` == "表冊名稱:臺灣省二二八事變正法及死亡人犯名冊"
data_2 <- data228$`檔號` == "A803000000A/0036/340.2/5502.3/19/007"
victims <- data228$`個人名稱`[data_1 & data_2]
class(victims)
victims
number_of_mention <- table(data228$`個人名稱`)
pick_name<- names(number_of_mention) %in% victims
num_01 <- number_of_mention[pick_name]
documentCount_eachVictim <-sort( as.integer(num_01),decreasing = T)
names(documentCount_eachVictim) <- names(num_01)
documentCount_eachVictim
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
enter_year <- courseStructure$`學年` == "103"
econ3 <- stringr::str_detect(courseStructure$`應修系級`,"經濟系3")
pick_vec = enter_year & econ3
econ101junior <- unique(courseStructure$`科目名稱`[pick_vec])
class(econ101junior)
econ101junior
# p=1.2的需求量
p=1.2
qd <- 10-5*p    #小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.2的需求量
p=1.2
qd <- 10-5*p    #小心是5*p, 不能寫5p
# p=1.3的需求量
p=1.3
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
# p=1.4的需求量
p=1.4
qd <- 10-5*p
demand <-           #創造一個物件叫demand
function(p){      #定義這個物件為函數
q_d <- 10-5*p}  #小心是5*p, 不能寫5p
p
qd
demand
demand
# p=1.2的需求量
demand(1.2)
# p=1.3的需求量
demand(1.3)
# p=1.4的需求量
demand(1.4)
demand_return <-
function(p){
q_d <- 10-5*p
return(q_d)
}
# 印在螢幕，但Global Environment並不會有q_d
demand_return(1.2)
demand(1.2)
demand_return(1.2)
.Last.value
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
q_d1.2
# 要長久存在Global Environment要指定物件名稱（不要求與q_d同名）
demand_return(1.2) -> q_d1.2
q_d1.2
demand_return(1.2) # 相當於
q_d <- 10-5*p}  #小心是5*p, 不能寫5p
q_d <- 10-5*p}  #小心是5*p, 不能寫5p
demand <-           #創造一個物件叫demand
function(p){      #定義這個物件為函數
q_d <- 10-5*p}  #小心是5*p, 不能寫5p
demand <-           #創造一個物件叫demand
function(p){      #定義這個物件為函數
q_d <- 10-5*p}  #小心是5*p, 不能寫5p
q_d <- 5
demand_return(p=1.2)
print(q_d)
demand_return <-
function(p){
q_s <- 0+2*p
return(q_s)
}
library(lubridate)
dateInput <- lubridate::today()
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") -> weather_next36hours
library(lubridate)
dateInput <- lubridate::today()
locationInput <- "新北市"
# 找出符合地點的天氣資訊：weatherAtLocation
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
# 在weatherAtLocation找出符合時間的天氣資訊
(weatherAtLocation$elementName=="MaxT") -> pick_MaxT
(weatherAtLocation$elementName=="MinT") -> pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
maxT
minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") -> weather_next36hours
askSilly_weather <- function(locationInput,dateInput){  #複製上方SOP
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") -> weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") -> pick_MaxT
(weatherAtLocation$elementName=="MinT") -> pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
askSilly_weather <- function(locationInput,dateInput){  #複製上方SOP
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") -> weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") -> pick_MaxT
(weatherAtLocation$elementName=="MinT") -> pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
askSilly_w.eather("臺中市",today())
askSilly_weather("臺中市",today())
askSilly_weather("花蓮縣",today())
what_time_it_is("Europe/Paris")
return(now)
what_time_it_is <- function(timezone){
now <- with_tz(now(),tz=timezone)
return(now)
}
what_time_it_is("Europe/Paris")
now()
now()
now()
now()
library(lubridate)
what_time_it_is <- function(timezone){
now <- with_tz(now(),tz=timezone)
return(now)
}
what_time_it_is("Europe/Paris")
class(demand_return)
# 查詢函數formals arguments要求
formals(askSilly_weather)
# 查詢函數主體
body(askSilly_weather)
learning_topics <-
list(
subject = "函數",
date = lubridate::ymd("2020-06-03"),
functionsCreated = list(
demand = demand_return)
# 等號右邊是呼叫demand_return的定義值，也就是function(...){...}值定義本身
)
learning_topics$functionsCreated$demand(1.2)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
typeof(demand_return)    #
# 查詢函數執行所要求環境
environment(demand_return)
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
intercept <- 10
slope <- -5     # 10-5*p
myDemand(1.2)
myDemand(1.2)
```{r}
slope <- -1     # 10-1*p
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
codetools::findGlobals(myDemand2)
environment(myDemand2)
codetools::findGlobals(myDemand2)
rm(intercept, slope)    #就算移除掉intercept/slope，也還是可以執行
rm(intercept, slope)    #就算移除掉intercept/slope，也還是可以執行
myDemand2(1.2)     #使用預設值
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
if(condition){
Body for TRUE
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
warning("你所輸入的學號不正確")     #想要偵測錯誤時使用warning
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T)
# 輸入我們的condition: 是否輸入學號「不」正確？
# 學號不正確 -> TRUE
# 字群regex：[ ]；字元regex：( | | )；要幾條：使用{ }表示
# [43] 表數字4或3
# (1[01][0-9]|9[0-9]) 表字元100~119 或 字元90~99
# [0-9]{5} 表後五位數字分別都可以是0~9
# ^ 表開頭；$ 表結尾 (中間只能有符合regex描述的數字)
) {
warning("你所輸入的學號不正確")     #想要偵測錯誤時使用warning
}
# 之後才執行以下程式
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T)
# 輸入我們的condition: 是否輸入學號「不」正確？
# 學號不正確 -> TRUE
# 字群regex：[ ]；字元regex：( | | )；要幾條：使用{ }表示
# [43] 表數字4或3
# (1[01][0-9]|9[0-9]) 表字元100~119 或 字元90~99
# [0-9]{5} 表後五位數字分別都可以是0~9
# ^ 表開頭；$ 表結尾 (中間只能有符合regex描述的數字)
) {
warning("你所輸入的學號不正確")     #想要偵測錯誤時使用warning
}
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T)
# 輸入我們的condition: 是否輸入學號「不」正確？
# 學號不正確 -> TRUE
# 字群regex：[ ]；字元regex：( | | )；要幾條：使用{ }表示
# [43] 表數字4或3
# (1[01][0-9]|9[0-9]) 表字元100~119 或 字元90~99
# [0-9]{5} 表後五位數字分別都可以是0~9
# ^ 表開頭；$ 表結尾 (中間只能有符合regex描述的數字)
) {
warning("你所輸入的學號不正確")     #想要偵測錯誤時使用warning
}
warning("incorrect student ID")  # 想要偵測錯誤時使用warning
# 以下為Body程式
library(stringr)
convert_TaiwanDate2WesternDate <-
function(twDate){
# 以下為Body程式
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,    # 要換掉的文字
as.character(westernYear)    # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
# 設計好後，以後就可以直接使用這個程式執行
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate) -> westernDate
class(westernDate)
D
westernDate
westernDate
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
library(SOAR)
```{r}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
n <- 54
if(as.logical(n %% 2)==1){    #奇數
fvalue <- -(n+1)/2
} else {                      #偶數
fvalue <- n/2
}
print(fvalue)
if((n %% 2)==1){    #奇數
fvalue <- -(n+1)/2
} else {                      #偶數
fvalue <- n/2
}
print(fvalue)    #顯示在下方
if(as.logical(n %% 2)){  # 只有0會變F，其他數值都是T
# if 放 TRUE 的值 -> 奇數 (餘數為1)
fvalue <- -(n+1)/2
} else {                 # else 放 FALSE 的值 -> 偶數 (餘數為0)
fvalue <- n/2
}
fvalue <- n/2
if(as.logical(n %% 2)){  # 只有0會變F，其他數值都是T
# if 放 TRUE 的值 -> 奇數 (餘數為1)
fvalue <- -(n+1)/2
} else {                 # else 放 FALSE 的值 -> 偶數 (餘數為0)
fvalue <- n/2
}
return(fvalue)    #回傳
myFun <- function(n){
if(as.logical(n %% 2)){  # 只有0會變F，其他數值都是T
# if 放 TRUE 的值 -> 奇數 (餘數為1)
fvalue <- -(n+1)/2
} else {                 # else 放 FALSE 的值 -> 偶數 (餘數為0)
fvalue <- n/2
}
return(fvalue)    #回傳
}
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i <- 1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
# 使用map 再巧妙轉換一下，前方定位一樣，好操作
numberSeq <- c(1,2,3)
map(numberSeq,
~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
library(purrr)
map(numberSeq,
~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
map(numberSeq,
~compute_howEarly(examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]]))
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
list_howEarly
print("優")                     #符合此情境 -> 印(顯示)出來
grade <- 90.8
if(grade >=90){
print("優")                     #符合此情境 -> 印(顯示)出來
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
grade <- 80
if(grade >=90){
print("優")
} else if(grade>=75 & grade<=89){
print("良")
} else if(grade>=70 & grade<=85){
print("尚可")
} else {
print("待加強")
}
grade <- 80
if(grade >=90){
print("優")
} else if(grade>=70 & grade<=85){
print("尚可")
} else if(grade>=75 & grade<=89){
print("良")
} else {
print("待加強")
}
grade <- 80
if(grade >=90){
print("優")
} else if(grade>=75 & grade<=89){
print("良")
} else if(grade>=70 & grade<=85){    #與上一個情境產生交集
print("尚可")
} else {
print("待加強")
}
grade <- 80
if(grade >=90){
print("優")
} else if(grade>=70 & grade<=85){
print("尚可")
} else if(grade>=75 & grade<=89){    #與上一個情境產生交集
print("良")
} else {
print("待加強")
}
grade <- 90.8
if(grade >=90){
print("優")                     #符合此情境 -> 印(顯示)出來
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
View(data228)
`全宗名編號`<-
str_extract(data228$`檔號`,"^[:upper:][:graph:]+[:upper:]$")
`全宗名編號`<- factor(`全宗名編號`)
`全宗名編號`<-
str_extract(data228$`檔號`,"^[:upper:][:graph:]+[:upper:]$")
`全宗名編號`<-
str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:]$")
`全宗名編號`<- factor(`全宗名編號`)
`全宗名編號`<-
str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<- factor(`全宗名編號`)
`全宗名編號`<-
str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:]/")
`全宗名編號`<- factor(`全宗名編號`)
`全宗名編號`<-
str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:](?=/)")
`全宗名編號`<- factor(`全宗名編號`)
`全宗名編號2`<-
str_extract(data228$`檔號`,"[:upper:][:graph:]+[:upper:]/")
`全宗名編號2`<- factor(`全宗名編號`)
`全宗名編號`
`全宗名編號2`
`全宗名編號`
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_view_all(Ids, "[AC]")
str_detect(Ids, "[AC]")    #偵測 出現A、C    #要/不要 邏輯向量
str_extract(Ids,"[A-Z]")    #取出 A-Z的字元
str_detect(Ids, "[AC]")    #偵測 出現A、C    #要/不要 邏輯向量
str_extract(Ids,"[A-Z]")    #取出 A-Z的字元
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")  #可替一整個*類別*改名稱
factor1
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor3 <- factor(c("好", "壞", "壞"))
factor4 <- factor(c("壞", "好", "好"))
c(factor3, factor4)
factor3[4:6] <- factor4    #元素創造-->創造原本不存在的第4項到第6項
factor3
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
violatedArticles <- unique(badEmployers$law)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(semiGodsSemiDevils)
str(semiGodsSemiDevils)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
View(studentHeights)

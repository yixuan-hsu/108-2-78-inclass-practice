seat_vector <- c()
row_name <- c("row1","row2","row3","row4","row5","row6","row7")
seat <- c(7,5,3,1,2,4,6)
unlist(map(1:7, ~{if(seatingChart[[.x]] == 0){
seat_vector <- c(seat_vector, paste(row_name[[.x]],"-",seat, sep=""))
}}))
}
list_availableSeats(seatingChart)
list_availableSeats
update_seatingChart <- function(seatingChart, selectedSeat)
{
selectedSeatList <- str_split(selectedSeat, "-")
selectedSeatList <- selectedSeatList[[1]]
row_name <- selectedSeatList[1]
col_name <- selectedSeatList[2]
one_row <- seatingChart[[row_name]]
if (is_null(one_row) || !(col_name %in% names(one_row))) {
warning("很抱歉您所選的位置已無法選")
} else  if (seatingChart[[row_name]][[col_name]] == 0) {
seatingChart[[row_name]][[col_name]] <- -1
} else {
warning("很抱歉您所選的位置已無法選")
}
return(seatingChart)
}
update_seatingChart(seatingChart, "row2-4")
update_seatingChart
update_seatingChart <- function(seatingChart, selectedSeat)
{
selectedSeatList <- str_split(selectedSeat, "-")
selectedSeatList <- selectedSeatList[[1]]
row_name <- selectedSeatList[1]
col_name <- selectedSeatList[2]
one_row <- seatingChart[[row_name]]
if (is_null(one_row) || !(col_name %in% names(one_row))) {
warning("很抱歉您所選的位置已無法選")
} else  if (seatingChart[[row_name]][[col_name]] == 0) {
seatingChart[[row_name]][[col_name]] <- -1
} else {
warning("很抱歉您所選的位置已無法選")
}
return(seatingChart)
}
update_seatingChart(seatingChart, "row2-4")
update_seatingChart
jsonlite::fromJSON("https://www.dropbox.com/s/eb4xcfp97ro7m3y/animal_names.json?dl=1") -> animal_friends
animal15 <- animal_friends[1:15]
animal15
seat_list <- list_availableSeats(chart)
assign_seats <- function(people, seatingchart)
{
seat_list <- list_availableSeats(seatingchart)
seats <- sample(1:length(seat_list), length(people), replace=FALSE)
seat_vector <- c()
for (i in seats)
{
seat_vector <- c(seat_vector, seat_list[i])
seatingchart <- update_seatingChart(chart, seat_list[i])
}
names(seat_vector) <- people
return(seat_vector)
}
assign_seats(animal15, seatingChart)
assign_seats <- function(people, seatingChart)
{
seat_list <- list_availableSeats(seatingChart)
seats <- sample(1:length(seat_list), length(people), replace=FALSE)
seat_vector <- c()
for (i in seats)
{
seat_vector <- c(seat_vector, seat_list[i])
seatingChart <- update_seatingChart(seatingChart, seat_list[i])
}
names(seat_vector) <- people
return(seat_vector)
}
assign_seats(animal15, seatingChart)
assign_seats
seat_list <- list_availableSeats(seatingChart)
seat_list <- list_availableSeats(seatingChart)
length(seat_list)
sample_friend_seat <- vector("character",15)
names(sample_friend_seat) <- animal15
names(sample_friend_seat)
list_availableSeats(selected_s)
selected_s <- sample(1:49,15,replace = FALSE)
list_availableSeats(selected_s)
list_availableSeats(seatingChart)
selected_s <- sample(1:49,15,replace = FALSE)
list_availableSeats(seatingChart)[selected_s]
sample_friend_seat <-
c(sample_friend_seat,
list_availableSeats(seatingChart)[selected_s])
sample_friend_seat
sample_friend_seat <-
c(
list_availableSeats(seatingChart)[selected_s])
sample_friend_seat
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
names(sample_friend_seat) <- people
names(sample_friend_seat) <- animal15
sample_friend_seat <- names(sample_friend_seat) <- animal15
sample_friend_seat
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
sample_friend_seat
sample_name <- names(sample_friend_seat) <- animal15
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
sample_name <- names(sample_friend_seat) <- animal15
names(sample_friend_seat)
sample_friend_seat
return(sample_friend_seat)
assign_seats <- function(people, seatingChart){
sample_friend_seat <- vector("character",15)
selected_s <- sample(1:49,15,replace = FALSE)
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
names(sample_friend_seat) <- people
return(sample_friend_seat)
}
assign_seats(animal15, seatingChart)
assign_seats <- function(people, seatingChart){
sample_friend_seat <- vector("character",15)
selected_s <- sample(1:49,15,replace = FALSE)
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
names(sample_friend_seat) <- people
return(sample_friend_seat)
}
assign_seats(animal15, seatingChart)
assign_seats(animal15, seatingChart)
assign_seats
assign_seats(animal15, seatingChart)
assign_seats <- function(people, seatingChart){
sample_friend_seat <- vector("character",15)
selected_s <- sample(1:49,15,replace = FALSE)
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
names(sample_friend_seat) <- people
#直接讓這個vector變成named vector
return(sample_friend_seat)
}
assign_seats(animal15, seatingChart)
myFun <- function(n) {
if (as.logical(n%%2)) {
fvalue <- -(n + 1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun2(c(-11,32,19,20))
myFun(c(-11,32,19,20))
myFun2(c(-11,32,19,20))
myFun2 <- function(n) {
vector_fun <- vector("numeric",10)
if (as.logical(n%%2)) {
fvalue <- -(n + 1)/2
vector_fun <- c(vector_fun,fvalue)
} else {
fvalue <- n/2
vector_fun <- c(vector_fun,fvalue)
}
return(vector_fun)
}
myFun2(c(-11,32,19,20))
myFun2 <- function(n) {
vector_fun <- vector("numeric",4)
if (as.logical(n%%2)) {
fvalue <- -(n + 1)/2
vector_fun <- c(fvalue)
} else {
fvalue <- n/2
vector_fun <- c(fvalue)
}
return(vector_fun)
}
myFun2(c(-11,32,19,20))
stringi::stri_locale_list()
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
source('https://www.dropbox.com/s/9y7gwbiqze0c3jy/editRenviron.R?dl=1')
Sys.setenv("LANGUAGE" = "EN")
Sys.setenv("LANGUAGE" = "EN")
Ufun <- function(a1, a2, m, alpha=0.5){
U(a1,a2) <- a1*alpha∗a2*(1−alpha)−m
Ufun <- function(a1, a2, m, alpha=0.5){
U(a1,a2) <- a1*alpha*a2*(1−alpha)−m
Ufun <- function(a1, a2, m, alpha=0.5){
U(a1,a2) <- a1**alpha*a2**(1−alpha)−m
U(a1,a2) <- (a1**alpha)*(a2**(1−alpha))−m
Ufun <- function(a1, a2, m, alpha=0.5){
U(a1,a2) <- (a1**alpha)*(a2**(1−alpha))−m
Ufun <- function(a1, a2, m, alpha=0.5){
U <- (a1**alpha)*(a2**(1−alpha))−m
Ufun=function(a1, a2, m, alpha=0.5){
a=(a1**alpha)*(a2**(1-alpha))-m
return(a)
}
Ufun <- function(a1, a2, m, alpha=0.5){
(a1^alpha)*(a2^(1−alpha))−m
Ufun<-function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1-alpha)-m
}
Ufun <- function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1−alpha)−m
return()
Ufun <- function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1−alpha)−m
return()
browseURL("https://docs.google.com/spreadsheets/d/1bdb4XPEwrQByujQ79PeQ5D0V_157ouRrRVDiA9cs3B0/edit#gid=0")
seatingChart <- list(
"row1"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L),
"row2"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L),
"row3"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L),
"row4"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L),
"row5"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L),
"row6"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L),
"row7"=c("7"=0L,"5"=0L,"A1"=-1L,"3"=0L,"1"=0L,"2"=0L,"4"=0L,"A2"=-1L,"6"=0L))
class(seatingChart$row1)
length(seatingChart$row1)
seatingChart
list_availableSeats <- function(seatingChart){
seat_vector <- c()
row_name <- c("row1","row2","row3","row4","row5","row6","row7")
seat <- c(7,5,3,1,2,4,6)
unlist(map(1:7, ~{if(seatingChart[[.x]] == 0){
seat_vector <- c(seat_vector, paste(row_name[[.x]],"-",seat, sep=""))
}}))
}
list_availableSeats(seatingChart)
list_availableSeats
seatingChart
list_availableSeats <- function(seatingChart){
seat_vector <- c()
row_name <- c("row1","row2","row3","row4","row5","row6","row7")
seat <- c(7,5,3,1,2,4,6)
unlist(map(1:7, ~{if(seatingChart[[.x]] == 0){
seat_vector <- c(seat_vector, paste(row_name[[.x]],"-",seat, sep=""))
}}))
}
list_availableSeats(seatingChart)
list_availableSeats <- function(seatingChart){
seat_vector <- c()
row_name <- c("row1","row2","row3","row4","row5","row6","row7")
seat <- c(7,5,3,1,2,4,6)
unlist(map(1:7, ~{if(any(seatingChart[[.x]] == 0)){
seat_vector <- c(seat_vector, paste(row_name[[.x]],"-",seat, sep=""))
}}))
}
list_availableSeats(seatingChart)
assign_seats <- function(people, seatingChart)
{
seat_list <- list_availableSeats(seatingChart)
seats <- sample(1:length(seat_list), length(people), replace=FALSE)
seat_vector <- c()
for (i in seats)
{
seat_vector <- c(seat_vector, seat_list[i])
seatingChart <- update_seatingChart(seatingChart, seat_list[i])
}
names(seat_vector) <- people
return(seat_vector)
}
assign_seats(animal15, seatingChart)
jsonlite::fromJSON("https://www.dropbox.com/s/eb4xcfp97ro7m3y/animal_names.json?dl=1") -> animal_friends
animal15 <- animal_friends[1:15]
assign_seats <- function(people, seatingChart)
{
seat_list <- list_availableSeats(seatingChart)
seats <- sample(1:length(seat_list), length(people), replace=FALSE)
seat_vector <- c()
for (i in seats)
{
seat_vector <- c(seat_vector, seat_list[i])
seatingChart <- update_seatingChart(seatingChart, seat_list[i])
}
names(seat_vector) <- people
return(seat_vector)
}
assign_seats(animal15, seatingChart)
update_seatingChart <- function(seatingChart, selectedSeat)
{
selectedSeatList <- str_split(selectedSeat, "-")
selectedSeatList <- selectedSeatList[[1]]
row_name <- selectedSeatList[1]
col_name <- selectedSeatList[2]
one_row <- seatingChart[[row_name]]
if (is_null(one_row) || !(col_name %in% names(one_row))) {
warning("很抱歉您所選的位置已無法選")
} else  if (seatingChart[[row_name]][[col_name]] == 0) {
seatingChart[[row_name]][[col_name]] <- -1
} else {
warning("很抱歉您所選的位置已無法選")
}
return(seatingChart)
}
update_seatingChart(seatingChart, "row2-4")
update_seatingChart
assign_seats <- function(people, seatingChart)
{
seat_list <- list_availableSeats(seatingChart)
seats <- sample(1:length(seat_list), length(people), replace=FALSE)
seat_vector <- c()
for (i in seats)
{
seat_vector <- c(seat_vector, seat_list[i])
seatingChart <- update_seatingChart(seatingChart, seat_list[i])
}
names(seat_vector) <- people
return(seat_vector)
}
assign_seats(animal15, seatingChart)
assign_seats
##我自己寫出來的!!!
assign_seats <- function(people, seatingChart){
sample_friend_seat <- vector("character",15)
selected_s <- sample(1:49,15,replace = FALSE)
sample_friend_seat <-
c(list_availableSeats(seatingChart)[selected_s])
names(sample_friend_seat) <- people
#直接讓這個vector變成named vector
return(sample_friend_seat)
}
assign_seats(animal15, seatingChart)
assign_seats
assign_seats(animal15, seatingChart)
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){    #多個T/F
#只取用第一個T/F，後面不管他
#情境判斷的condition只能回覆一個T/F值，不然判斷可能會出錯
#因此，可以藉由all/any 來變化
print("你答對了")
}
list_availableSeats <- function(seatingChart){
seat_vector <- c()
row_name <- c("row1","row2","row3","row4","row5","row6","row7")
seat <- c(7,5,3,1,2,4,6)
unlist(map(1:7, ~{if(any(seatingChart[[.x]] == 0)){
seat_vector <- c(seat_vector, paste(row_name[[.x]],"-",seat, sep=""))
}}))
}
list_availableSeats(seatingChart)
list_availableSeats
Ufun <- function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1−alpha)−m
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1−alpha)−m
Ufun <- function(a1, a2, m, alpha=0.5){
U = a1^alpha*a2^(1−alpha)−m
Ufun <- function(a1, a2, m, alpha=0.5){
U = a1^alpha*a2^(1-alpha)-m
return(U)
}
U <- a1^alpha*a2^(1-alpha)-m
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
}
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
}
Ufun(Apps_10)
class(U)
U <- a1^alpha*a2^(1-alpha)-m
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
class(U)
}
Ufun(0.38,0.74,0.19)
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
pirint(class(U))
}
Ufun(0.38,0.74,0.19)
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
}
Ufun(0.38,0.74,0.19)
Ufun(unlist(Apps_10))
Ufun(Apps_10)
Apps_10[[1]]
Apps_10[[1]][[1]]
Apps_10[[1]][[1]] -> a1
Apps_10[[1]][[2]] -> a2
Apps_10[[1]][[3]] -> m
a1
a2
map(1:3,~Apps_10[[1]][[.x]] -> a1)
`1st` <- map(1:3,~Apps_10[[1]][[.x]] -> a1)
Ufun(`1st`)
Ufun(`1st`)
`1st` <- as.numeric(unlist(map(1:3,~Apps_10[[1]][[.x]] -> a1)))
Ufun(`1st`)
as.numeric(unlist(map(1:3,~Apps_10[[1]][[.x]] -> a1)))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[10]] -> a1)))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a1_10apps
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun(a1_10apps,a2_10apps,a3_10apps)
max(Ufun(a1_10apps,a2_10apps,a3_10apps))
Ufun(a1_10apps,a2_10apps,a3_10apps)==(Ufun(a1_10apps,a2_10apps,a3_10apps))
Ufun(a1_10apps,a2_10apps,a3_10apps) == max(Ufun(a1_10apps,a2_10apps,a3_10apps))
Ufun(a1_10apps,a2_10apps,a3_10apps,alpha=0.3)
Ufun(a1_10apps,a2_10apps,a3_10apps,alpha=0.3) == max(Ufun(a1_10apps,a2_10apps,a3_10apps,alpha=0.3))
Ufun(a1_10apps,a2_10apps,a3_10apps,alpha=0.95) == max(Ufun(a1_10apps,a2_10apps,a3_10apps,alpha=0.95))
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return()
}
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return()
}
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return()
}
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
}
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun <- function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1-alpha)-m
return()
}
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun <- function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1-alpha)-m
return()
}
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
Ufun <- function(a1, a2, m, alpha=0.5){
a1^alpha*a2^(1-alpha)-m
}
Apps_10 <- list(
c(0.38,0.74,0.19), c(0.39,0.46,0.26), c(0.56,0.3,0.32), c(0.54,0.31,0.40), c(0.90,0.56,0.43), c(0.39,0.13,0.23),
c(0.83,0.74,0.39), c(0.66,0.84,0.37), c(0.41,0.49,0.35),
c(0.49,0.35,0.20))
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)
return(U)
Ufun <- function(a1, a2, m, alpha=0.5){
U <- a1^alpha*a2^(1-alpha)-m
return(U)
}
a1_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[1]] -> a1)))
a2_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[2]] -> a2)))
a3_10apps <- as.numeric(unlist(map(1:10,~Apps_10[[.x]][[3]] -> a3)))
Ufun(a1_10apps,a2_10apps,a3_10apps)

str_extract_all(       # str_某funtion(string字串,pattern描述)
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
)     # str_extract_all -->回傳list
str_extract(           # 萃取
c("民國108年12月5日","民國98年10月5日"),
"(?<=民國)[0-9]{2,3}(?=年)"
)     # str_extract -->回傳vector
install.packages("htmlwidgets")
library(htmlwidgets)
studentIds <- c(
"410873029","410773005","410772035","410562123","410636107")
# 取出學號中的入學屆為107或108
str_view_all(studentIds,"(107|108)")
str_detect(Ids, "[AC]") # 偵測 出現A、C
Ids <- c("A283743192","B829103720","A10920402","C291022384")
str_detect(Ids, "[AC]") # 偵測 出現A、C
# 是否來自107或108學屆
str_detect(studentIds, "107|108")    #要/不要 邏輯向量
str_extract(Ids,"[A-Z]")    #取出 A-Z的字元
str_detect(Ids, "[AC]")    #偵測 出現A、C    #要/不要 邏輯向量
# 假設有3種敘述
claimA <- "我得到A檸檬99"
claimB <- "我的是7777Z"
claimC <- "我玩了兩次，一次是7蘋果H，另一次是5紅心J"
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine)
strip1 <- "[0-9]"
strip2 <- "(櫻桃|777|紅心)"
# 字群組合strip 因為等下放中間所以用()括起來
strip3 <- "[A-Z]"
myRegexSlotMachine <- paste0(strip1,strip2,strip3)
print(myRegexSlotMachine)
# 顯示吻合的出象
str_view(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine)
# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
str_view_all(headline, "陳[^官]")
#固定字元 + 有1個strip：出象為排除掉"陳官"的字元
str_count(headline, "陳[^官]")
str_extract(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
str_extract(addresses,myRegexSlotMachine)
myRegexSlotMachine <- "[0-9]+號"
str_extract(addresses,myRegexSlotMachine)
dateChina <- "康熙23年5月6日"
regex_pattern1 <- "(?<=康熙)[0-9]+(?=年)"
yearChina <- str_extract(dateChina, regex_pattern1)
yearChina
westernYear1 <- as.integer(year) + 1661
westernYear1 <- as.integer(year) + 1661
westernYear1 <- as.integer(yearChina) + 1661
westernYear1
yearChina <- str_extract(dateChina, regex_pattern1)
yearChina
westernYear1 <- as.integer(yearChina) + 1661
westernYear1
date_reform <- str_replace(
dateChina,
regex_pattern1,
as.character(westernYear1)
)
datefinal_1 <- lubridate::ymd(date_reform)
class(datefinal_1)
datefinal_1
westernYear1
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
target_regex <- "段兄"
a_regex <- "弟"
regex_pattern <- glue::glue("{target_regex}(?!{B_regex})")
regex_pattern <- glue::glue("{target_regex}(?!{a_regex})")
print(regex_pattern)
twDate <-  c("民國108年12月5日","民國98年10月5日")
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
back_regex
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
back_regex
target_regex <- "段兄"
a_regex <- "弟"
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
class(back_regex)
class(back_regex)
target_regex <- "段兄"
a_regex <- "弟"
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
class(back_regex)
back_regex
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
class(back_regex)
back_regex
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
class(back_regex)
back_regex
target_regex <- "段兄"
a_regex <- "弟"
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
class(back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
class(back_regex)
back_regex
back_regex <- glue::glue("{target_regex}(?!{a_regex})")
class(back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "[段兄](?!弟)"
class(back_regex)
back_regex
```{r}
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "段兄(?!弟)"
class(back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "段兄(?!弟)"
class(back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_view_all(back_regex)
str_view_all(twoNames,back_regex)
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- twoNames("段兄(?!弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- twoNames("段兄(?!弟)")
back_regex <- str_extract_all(twoNames, "段兄(?!弟)")
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex <- str_extract_all(twoNames, "段兄(?!弟)")
class(back_regex)
back_regex <- twoNames("段兄(?!弟)")
back_regex <- (twoNames,"段兄(?!弟)")
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_view_all(twoNames,back_regex)
str_view_all(twoNames)
str_view_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(semiGodsSemiDevils)
View(semiGodsSemiDevils[[5]][[1]])
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[[1]]$section[p2]
str(semiGodsSemiDevils)
context_picked <- semiGodsSemiDevils$data[[1]]$section=="p2"
pick <- semiGodsSemiDevils$data[[1]]$section=="p2"
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="p2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
context_picked
str(semiGodsSemiDevils)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="p2"
pick
View(semiGodsSemiDevils)
View(semiGodsSemiDevils[[5]][[1]])
pick <- semiGodsSemiDevils$data[[1]]$section[3]
pick
pick <- semiGodsSemiDevils$data[[1]]$section[[3]]
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
context_picked <- semiGodsSemiDevils$data[[1]]$text[[3]]
context_picked
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
context_picked
context_picked <- semiGodsSemiDevils$data[[1]]$text[[3]]
context_picked
class(context_picked)
textExample <- c("段1......。　　段2....。")
context_picked
blank_regex <- "\\s"{2}
str_split(context_picked, "\\s"{2})
textExample <- c("段1......。　　段2....。")
str_split(context_picked, "\\s"{2})
str_split(context_picked, "\\s"+)
str_split(context_picked, "\\s"{2})
context_picked
str_split(context_picked, "\\s")
str_split(context_picked, "\\s\\s")
str(context_picked_split)
context_picked_split <- str_split(context_picked, "\\s\\s")
str(context_picked_split)
str_split(context_picked, "\\s\\s")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_view_all(mention_duan)
str_view_all(context_picked_split,mention_duan)
mention_duan <- str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split,"c(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_view_all(context_picked_split,mention_duan)
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
context_picked_split
context_picked_split[[1]]
str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_extract_all(context_picked_split,"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_view_all(context_picked_split[[1]],mention_duan)
str_view_all(as.character(context_picked_split[[1]]),mention_duan)
str_view_all(as.character(context_picked_split[[1]]),mention_duan)
str_view_all(context_picked_split[[1]],as.character(mention_duan))
mention_duan
place <- semiGodsSemiDevils$data[[1]]$section=="p2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[place]
semiGodsSemiDevils$data[[1]]$text[place]
place <- semiGodsSemiDevils$data[[1]]$section=="p2"
context_picked <- semiGodsSemiDevils$data[[1]]$text[place]
semiGodsSemiDevils$data[[1]]$text[place]
semiGodsSemiDevils$data[[1]]$text[place]
place <- semiGodsSemiDevils$data[[1]]$section=="P2"
semiGodsSemiDevils$data[[1]]$text[place]
semiGodsSemiDevils$data[[1]]$text[place]
context_picked <- semiGodsSemiDevils$data[[1]]$text[place]
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "(?=，)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
str_view_all(twoNames,back_regex)
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex <- "段兄(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
context_picked
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_view_all(context_picked_split[[1]],as.character(mention_duan))
mention_duan
str_view_all(context_picked_split[[1]],as.character(mention_duan))
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
str_view_all(context_picked_split[[1]],as.character(mention_duan))
mention_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
back_regex <- "(?!弟)"
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
class(mention_duan)
length(mention_duan)
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(unlist(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)"))
mention_duan <- str_extract_all(unlist(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)"))
mention_duan <- str_extract_all(unlist(context_picked_split[[1]]),"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
table_duan <- table(unlist(mention_duan))
table_duan
View(mention_duan)
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?=(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?段(譽|兄|兄弟|大哥|相公|君|的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
class(context_picked_split)
context_picked_split
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
class(mention_duan)
length(mention_duan)
mention_duan
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
class(table_duan)
table_duan <- table(unlist(mention_duan))
class(table_duan)
table_duan
table_duan <- table(unlist(mention_duan))
class(table_duan)
table_duan
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
context_picked
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
class(table_duan)
table_duan

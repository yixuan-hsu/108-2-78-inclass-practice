`學期`=list(       #位置2--學期
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(list(name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
listExample <-
list(
student="小明",       #位置1--student
`學期`=list(       #位置2--學期
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(list(name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
View(listExample)
## list範例
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
## list範例
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
listExample <-
list(
student="小明",       #位置1--student
`學期`=list(       #位置2--學期
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(list(name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
listExample <-
list(
student="小明",       #位置1--student
`學期`=list(       #位置2--學期
`108-1`=list(list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(list(
name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
View(listExample)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
# 有多少位置可選：
length(listExample)
View(listExample)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
length(tainanSportsMap)
listExample[[1]]
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
View(tainanSportsMap)
# 有多少名字可選：
names(listExample)
listExample$student    #當作物件名稱，不須再下雙引號
listExample$`學期` # 特殊命名依然要用反頓點呼叫
listExample$student    #當作物件名稱，不須再下雙引號
listExample$`學期` # 特殊命名依然要用反頓點呼叫
View(listExample)
listExample <-
list(
student="小明",       #位置1--student
`學期`=list(       #位置2--學期
`108-1`=list(list(
name="個體經濟學",
teacher="Alice",
grade=85)
),
`108-2`=list(list(
name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
listExample <-
list(
student="小明",       #位置1--student
`學期`=list(       #位置2--學期
`108-1`=list(list(
name="個體經濟學",
teacher="Alice",
grade=85)
),
`108-2`=list(list(
name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
str(listExample)
listExample$student    #當作物件名稱，不須再下雙引號
listExample$`學期`    #特殊命名依然要用反頓點呼叫
str(listExample)    #顯示在下方彈跳視窗
str(listExample)    #顯示在下方彈跳視窗 (顯示的內容與右方視窗相同)
str(listExample$`學期`)
str(listExample)    #顯示層級在下方彈跳視窗 (與右方視窗的內容相同)
str(listExample)    #顯示層級在下方彈跳視窗 (與右方視窗的內容相同)
str(listExample$`學期`)
str(listExample$`學期`)    #可指定從中間層級開始 (特殊命名->反頓點)
listExample[["student"]]    #當成字串，要使用雙引號
listExample$student
listExample[["學期"]] # 小心不是反頓點喔
listExample$`學期`
listExample[["student"]]    #當成字串，要使用雙引號
listExample$student
listExample[["學期"]] # 小心不是反頓點喔
listExample$`學期`
listExample[["學期"]] # 小心不是反頓點喔
listExample$`學期`
student <- "student"
listExample[[student]]
listExample[["student"]]    #當成字串，要使用雙引號
student <- "student"    #定義/設定 student 的值
listExample[[student]]    #呼叫 student 的值
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
fromJSON("http://data.ntpc.gov.tw/api/v1/rest/datastore/382000000A-000157-002",
simplifyDataFrame = F) -> newTaipeiCityVaccine
str(newTaipeiCityVaccine)
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine)
str(newTaipeiCityVaccine$result)
length(newTaipeiCityVaccine)
names(newTaipeiCityVaccine)
listExample$`學期`    #特殊命名依然要用反頓點呼叫
listExample <-
list(
student="小明",       #位置1--student
`學期`=list(       #位置2--學期
`108-1`=list(list(
name="個體經濟學",
teacher="Alice",
grade=85)
),
`108-2`=list(list(
name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
listExample$`學期`    #特殊命名依然要用反頓點呼叫
str(listExample$`學期`)    #可指定從中間層級開始 (特殊命名->反頓點)
listExample$`學期`    #特殊命名依然要用反頓點呼叫
newTaipeiCityVaccine$result
newTaipeiCityVaccine[[2]]
newTaipeiCityVaccine$result    #名字取法
newTaipeiCityVaccine$result    #名字取法
newTaipeiCityVaccine[[2]]
newTaipeiCityVaccine[[2]]
str(newTaipeiCityVaccine[["result"]])
newTaipeiCityVaccine[[2]]    #位置取法 (1-->success，2-->result)
str(newTaipeiCityVaccine[[2]])    #位置取法
str(newTaipeiCityVaccine[[1]])
str(newTaipeiCityVaccine$success)
str(newTaipeiCityVaccine[["success"]])
str(newTaipeiCityVaccine[[2]] , max.level = 1) #設定最多顯示幾個層級
str(newTaipeiCityVaccine$result , max.level = 1)
str(newTaipeiCityVaccine[["result"]] , max.level = 1)
vectorExample
## vecter範例
vectorExample <- c("小明","小英","大雄")
#位置： 1     2      3
# 有多少位置可選：
length(vectorExample)
vectorExample[[1]]    #選位置1
vectorExample[[3]]    #選位置3
vectorExample
vectorExample[c(1,3)]
vectorExample[c(3,2,1)] # 產生重新排列效果
str(listExample, max.level=1)    # 顯示到第一層
str(listExample[c(1,2)] , max.level = 1)
str(listExample[c(1,2)] , max.level = 1)
str(listExample[c(2,1)] , max.level = 1)
library(jsonlite)
fromJSON("https://data.tainan.gov.tw/dataset/4cd9345a-04bf-4328-a97d-314ff78b4763/resource/afc025fc-1ef4-447c-b785-a680391d0ca1/download/tnsport2.json", simplifyDataFrame = F) -> tainanSportsMap
length(tainanSportsMap)
tainanSportsMap[[1]]
tainanSportsMap[[1076]]
str(tainanSportsMap[c(1,120,1076)] , max.level = 1)
str(listExample, max.level=1)    #顯示到第一層
listExample[c("學期")]
listExample[c("student","學期")]
listExample[c("學期","student")]
listExample[c("學期")]
listExample[c("student","學期")]
listExample[c("學期","student")]
listExample[[c("學期")]]    #相較上一行，使用[[ ]]比較好
listExample[[c("學期")]]    #相較上一行，使用[[ ]]比較好
listExample[["學期"]]
fromJSON("https://www.dropbox.com/s/qnm9bnz7vccrvcz/taipeiNightMarkets.json?dl=1", simplifyDataFrame = F) -> taipeiNightMarkets
View(taipeiNightMarkets)
str(taipeiNightMarkets)
str(taipeiNightMarkets , max.level = 1)
str(taipeiNightMarkets , max.level = 1)
str
str(taipeiNightMarkets , max.level = 1)
str(taipeiNightMarkets[c(1,6,8)])
str(taipeiNightMarkets[c(1,6,8)] , max.level = 1)
str(taipeiNightMarkets[c(1,6,8)] , max.level = 1)    #用位置選
str(taipeiNightMarkets[c("寧夏觀光夜市","南機場夜市","饒河街觀光夜市")])
str(taipeiNightMarkets[c("寧夏觀光夜市","南機場夜市","饒河街觀光夜市")] , max.level = 1)
str(taipeiNightMarkets , max.level = 1)
str(taipeiNightMarkets[c(1,6,8)] , max.level = 1)    #用位置選
str(taipeiNightMarkets[c("寧夏觀光夜市","南機場夜市","饒河街觀光夜市")] , max.level = 1)
vectorExample
vectorExample[c(T,T,F)]    #要，要，不要
str(listExample[c(F,T)])    #不要，要
str(listExample[c(T,T)])    #要，要
str(listExample)
str(listExample[c(F,T)])    #不要，要
str(listExample[c(T,T)])    #要，要
str(listExample[c(F,T)])    #不要，要
str(listExample[c(T,T)])    #要，要
str(listExample[c(F,T)])    #不要，要
str(listExample[c(F,T)])    #不要，要
str(listExample[c("學期")])
names(taipeiNightMarkets)
names(taipeiNightMarkets)
names(taipeiNightMarkets)
c()
names(taipeiNightMarkets)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarket
names(taipeiNightMarkets)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarket    #定義/設定 要選出來的夜市
#用T/F邏輯向量，每個細項都要標示T or F
names(taipeiNightMarkets)
c(T,F,F,
F,T,F,
F,F,F,
T,F,F,
F,T) -> selectedMarkets    #定義/設定 要選出來的夜市
#用T/F邏輯向量，每個細項都要標示清楚T or F ， 不能有遺漏的細項
str(taipeiNightMarkets[selectedMarkets])
str(taipeiNightMarkets[selectedMarkets] , max.level = 1)  #呼叫物件
selectedMarkets <- rep(F,14)    #repeat False 14次
selectedMarkets <- rep(F,14)    #repeat False 14次
print(selectedMarkets)
names(taipeiNightMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE    #箭頭反指向表"取代"
print(selectedMarkets)
selectedMarkets <- rep(F,14)    #repeat False 14次
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE  #選擇元素，箭頭反指向表"取代"
print(selectedMarkets)
selectedMarkets <- rep(F,14)    #repeat False 14次
print(selectedMarkets)
selectedMarkets[c(1,5,10,14)] <- TRUE  #選擇元素，箭頭反向指表"取代"
#適用於所有的選取元素
print(selectedMarkets)
str(taipeiNightMarkets[selectedMarkets] , max.level = 1)
str(taipeiNightMarkets[selectedMarkets] , max.level = 1)  #呼叫物件
str(listExample , max.level = 3)
str(listExample , max.level = 3)
get1 <- listExample[["學期"]]
get2 <- listExample["學期"]
get1 <- listExample[["學期"]]    #較推薦使用
get2 <- listExample["學期"]    #較不推薦使用
# get1  # 學期拿出來，有3個元素的list
str(listExample , max.level = 3)
get1 <- listExample[["學期"]]
str(get1)
get1 <- listExample[["學期"]]
str(get1 , max.level = 1)
get2 <- listExample["學期"]
str(get2 , max.level = 1)
# get2 # listExample 只留下'學期'元素，是只有一個元素的list
str(listExample , max.level = 3)
str(get2 , max.level = 2)
# get1  # 學期'拿出來'，有3個元素的list
str(listExample , max.level = 3)
str(get2 , max.level = 1)    #第1層是
str(get1 , max.level = 1)    #第1層是 108-1 / 108-2
str(get2 , max.level = 2)    #第2層才是 108-1 / 108-2
numVector <- c(2,3,6,-1,4,2,6)
select1
select1 <- numVector[c(1,4)]
select2 <- select1[[1]]
numVector <- c(2,3,6,-1,4,2,6)
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1    #用位置選
select2 <- select1[[1]]; select2
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1    #用位置選
#分號; 是合併指令的意思
select2 <- select1[[1]]; select2
#分號; 表示'合併指令'
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
# 相當於
numVector[c(1,4)][[1]]
select3 <- numVector[c(T,T,F,T,F,F,T)]; select3
select4 <- select1[c(1,4)]; select4
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
select4 <- select3[c(1,4)]; select4
select3 <- numVector[c(T,T,F,T,F,F,T)]; select3
select4 <- select3[c(1,4)]; select4
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
majors <- c("經濟學系","經濟學系","社會學系","社工系","經濟學系")
names <- c("小英", "小美", "大雄","阿華", "阿尼")
gender <- c("F","F","M","F","M")
econOnly <- c(T,T,F,F,T)
names[econOnly]
gender[econOnly]
econFemaleOnly <- gender[econOnly][c(T,T,F)]
names[econOnly][c(T,T,F)]
econOnly <- c(T,T,F,F,T)
names[econOnly]
econOnly <- c(T,T,F,F,T)；econOnly
econOnly <- c(T,T,F,F,T); econOnly
names[econOnly]
gender[econOnly]
econFemaleOnly <- gender[econOnly][c(T,T,F)]; econFemaleOnly
gender[econOnly]
econFemaleOnly <- gender[econOnly][c(T,T,F)]; econFemaleOnly
names[econOnly][c(T,T,F)]
econOnly <- c(T,T,F,F,T) ; econOnly
names[econOnly]
gender[econOnly]
econFemaleOnly <- c(T,T,F) ; econFemaleOnly
names[econOnly][econFemaleOnly]
econFemaleOnly <- gender[c(T,T,F)] ; econFemaleOnly
econFemaleOnly <- gender[c(T,T,F)] ; econFemaleOnly
gender[econOnly]
econFemaleOnly <- gender[c(T,T,F)] ; econFemaleOnly
names[econOnly][econFemaleOnly]
econOnly <- c(T,T,F,F,T) ; econOnly
names[econOnly]
gender[econOnly]
econFemaleOnly <- gender[c(T,T,F)] ; econFemaleOnly
names[econOnly][econFemaleOnly]
econFemaleOnly <- econOnly[c(T,T,F)] ; econFemaleOnly
names[econOnly][econFemaleOnly]
econFemaleOnly <- econOnly[c(T,T,F)] ; econFemaleOnly
gender[econOnly]
econOnly <- c(T,T,F,F,T); econOnly
names[econOnly]
gender[econOnly]
econFemaleOnly <- gender[econOnly][c(T,T,F)]; econFemaleOnly
names[econOnly][c(T,T,F)]
#先選...再從中選... (需同時滿足連鎖選擇條件)
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1    #用位置選
#分號; 表示'合併指令'
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
#不論是單、雙引號或者是用位置選、用名字選、用邏輯選，都能夠合併串在一起選取
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
econFemaleOnly <- gender[econOnly][c(T,T,F)]; econFemaleOnly
names[econOnly][c(T,T,F)]

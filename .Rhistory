teacher="Alice",
grade=85)
),
`108-2`=list(list(
name="總體經濟學",
teacher="Mark",
grade=78)
)
)
)
# 有多少位置可選： (基本上是從第一層的list中 所含的元素個數來看)
length(listExample)
listExample[[1]]    #選位置1--student
listExample[[2]]    #選位置2--學期
str(listExample , max.level = 3)
# get1  # 學期'拿出來'，有3個元素的list
str(listExample , max.level = 3)
get1 <- listExample[["學期"]]   #將'學期'(不包含)下的層級物件取出來
#不保有母層的list架構
str(get1 , max.level = 1)    #第1層是 108-1 / 108-2
# get2 # listExample 只留下'學期'元素，是只有一個元素的list
str(listExample , max.level = 3)
get2 <- listExample["學期"]   #把'學期'(包含)與層級下整個物件留下來
#保有母層的list架構
str(get2 , max.level = 1)    #第1層是 學期
str(get2 , max.level = 2)    #第2層才是 108-1 / 108-2
numVector <- c(2,3,6,-1,4,2,6)
select1 <- numVector[c(1,4)]; select1    #用位置選
#分號; 表示'合併指令'
select2 <- select1[[1]]; select2
# 相當於
numVector[c(1,4)][[1]]
#不論是單、雙引號或者是用位置選、用名字選、用邏輯選，都能夠合併串在一起選取
select3 <- numVector[c(T,T,F,T,F,F,T)]; select3
select4 <- select3[c(1,4)]; select4
# 相當於
numVector[c(T,T,F,T,F,F,T)][c(1,4)]
#先選...再從中選... (需同時滿足連鎖選擇條件)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr)
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
View(params)
View(poem_new)
View(poem_song)
print(poem_songOrder)
str(poem_songOrder)
print(poem_songOrder)
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)]
print(poem_songOrder)
poem_song
poem_song
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)]
poem_song
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)] ->poem_song
poem_song
poem_song[c(poem_songOrder)] -> poem_song
poem_song
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)] -> poem_song
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)] -> poem_song
poem_song
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)]
poem_song[c(4 ,  1 ,  2 ,  3 ,  6 ,  7  , 8 , 10 , 11 , 12 , 16 , 17 , 18  ,19,
20,  21,  29 , 24,  25 , 26 , 28,  22 , 30,  31,  32 , 33 , 34,  35,
36 , 37,  38 , 39 , 42,  43,  44 , 46 , 47,  49 , 50 , 51,  52,  53,
54 , 55 , 56 , 57,  58,  59,  61 ,63 , 64  ,65 , 66 , 67 , 68 , 70,
71 , 72 , 73 , 75,  76  ,78,  79 , 80,  81 , 82 , 83 , 85,  87 , 90,
91 , 92 , 93 , 95 , 97,  98,  99 ,100, 102, 103 ,104, 105 ,106 ,108,
109, 110, 111, 112, 115 ,116, 118 ,119, 120, 121, 122 ,124, 125, 126,
127, 128, 129, 130, 131, 132, 133 ,135,  62,   5  , 9 , 13,  14,  15,
23 , 27,  40 , 41 , 45 , 48 , 60 , 69 , 74 , 77  ,84  ,86,  88 , 89,
94 , 96, 101, 107, 113 ,114, 117 ,123 ,134)] -> poem_song
poem_song
poem_song[[136]] <- poem_new
poem_song
poem_song[[136]] <- poem_new
poem_song
install.packages(rvest)
install.packages(rvest)
install.packages(rvest)
library(rvest)
install.packages(rvest)
library(rvest)
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
install.packages(rvest)
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
View(post)
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
library(jsonlite); library(readr)
fromJSON("https://www.dropbox.com/s/b59ye5qoxnwhzu9/poem_song.json?dl=1", simplifyDataFrame = F) -> poem_song
fromJSON("https://www.dropbox.com/s/mjvaqdu4gufblag/poem_new.json?dl=1", simplifyDataFrame = F) -> poem_new
read.csv("https://www.dropbox.com/s/oyzvb3d05igb05e/poem_songOrder.csv?dl=1")$x -> poem_songOrder
print(poem_songOrder)
poem_song <- poem_song[c(poem_songOrder)]
poem_song
str(poem_song)
View(poem_song)
print(numerals_Gujarati)
source("https://www.dropbox.com/s/tv16xt8mv11cli7/gujarati.R?dl=1")
print(receipts300[1:30]) # 印前30張
print(numerals_Gujarati)
a<-as.numeric(factor(receipts300))
sum300<-sum(a)
sum300
sum1<-as.numeric(factor(receipts300))
sum300<-sum(sum1)
sum300
sum1 <- as.numeric(factor(receipts300))
sum300 <- sum(sum1)
sum300
str(post)
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
class(post[[5]][[1]])
class(post[[5]][[4]])
class(gender)
class(post[[5]][[1]])
class(post[[5]][[4]])
as.factor(post[[5]][[1]]) -> gender
as.factor(post[[5]][[1]]) -> gender
as.integer(post[[5]][[4]]) -> hearts
class(gender)
class(hearts)
class(post[[5]][[1]])
class(post[[5]][[4]])
as.factor(post[[5]][[1]]) -> post[[5]][[1]]
as.integer(post[[5]][[4]]) -> post[[5]][[4]]
class(post[[5]][[1]])
class(post[[5]][[4]])
a <- "我叫"
b <- c("小明","阿美")
paste0(a,b)
str(post)
str(category)
category <- post[[4]][[1]]
dateTime <- post[[4]][[2]]
str(category)
str(dateTime)
post[-c(4)]
category <- post[[4]][[1]]
str(category)
post[[4]] <- NULL
post$category <-"category"
str(post)
source("https://www.dropbox.com/s/6pzodo4967mc9g4/dcardPost.R?dl=1")
category <- post[[4]][[1]]
dateTime <- post[[4]][[2]]
str(category)
str(dateTime)
post[[4]] <- NULL
post$category <-"category"
str(post)
post[c(title,content,submitter_gender,category,dateTime,comments)]
title <- post[[1]]
content <- post[[2]]
submitter_gender <- post[[3]]
category <- post[[4]][[1]]
dateTime <- post[[4]][[2]]
comments <- post[[6]]
title <- post[[1]]
content <- post[[2]]
submitter_gender <- post[[3]]
category <- post[[4]][[1]]
dateTime <- post[[4]][[2]]
comments <- post[[5]]
post[c(title,content,submitter_gender,category,dateTime,comments)]
title <- post[[1]]
post[[4]] <- NULL
post$category <- "category"
post$dateTime <- "dateTime"
post[c(title,content,submitter_gender,category,dateTime,comments)]
str(post)
polandtime<- ymd_hms("2020-4-25",tz="Poland, Warsaw")
post[[5]]$gender[[26]] <- "男"
polandtime<- ymd_hms("2020-4-25",tz="Poland, Warsaw")
post[[5]]$gender[[26]] <- "男"
polandtime<- ymd_hms("2020-4-25",tz="Poland, Warsaw")
polandtime<- ymd_hms("2020-4-25",tz="Poland/ Warsaw")
install.packages(rvest)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a <- c(2, 3, 5)
b <- c(4,-1, 3)
a+b
a-b
a*b
a/b
a+b    #做各對相同位置的相加--> elementwise operation
a-b
a*b
a/b
a %% b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a ** b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a ** b
*加、減、乘、除： +, -, *, /
```{r}
a <- c(2, 3, 5)
b <- c(4,-1, 3)
```
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
print(sequenceNums)
sequenceNums %% 2    #餘數為1則是奇數，0則是偶數
# a+b 即等於
c(2+4, 3+(-1), 5+3)
# a**b 即等於
c(2**4, 3**(-1), 5**3)
5*c(1,3,4)+7
# 其實是
c(5)*c(1,3,4)+c(7)
5*c(1,3,4)+7
## Recycle等長後才進行elementwise operation:
c(5*1+7, 5*3+7, 5*4+7)
c(2,3)/c(-2,-13,10,22)
c(2,3,2,3)/c(-2,-13,10,22)
c(2,3)/c(-2,-13,10)
# 相當於
c(2,3,2)/c(-2,-13,10)
c(2,3)/c(-2,-13,10)
# 相當於
c(2,3,2)/c(-2,-13,10)
c(2,3)/c(-2,-13,10)
c(2,3)/c(-2,-13,10)
# 相當於
c(2,3,2)/c(-2,-13,10) #會出現警訊提醒兩項個數不是倍數關係 但還是可算
c(2,3)/c(-2,-13,10)
# 相當於
c(2,3,2)/c(-2,-13,10) #會出現警訊提醒兩項個數不是倍數關係 但還是可算
c(2,3)/c(-2,-13,10)
# 相當於
c(2,3,2)/c(-2,-13,10) #會出現警訊提醒兩項個數不是倍數關係 但還是可算
c(2,3)/c(-2,-13,10)
paste0(
c("我叫"), c("小明","小美") )
#也等於是
paste0(
c("我叫","我叫"), c("小明","小美") )
paste0(
c("我叫"), c("小明","小美") )
#也等於是
paste0(
c("我叫","我叫"), c("小明","小美") )
paste0(
c("他叫","我叫"), c("小明","小美","大雄"))
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example$name[c(T, F, T, F)]
example$name[c(T, F, T, F)]
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$height
c(175, 166, 170, 160) >= 170
example$name[pick_above170]
example$name[pick_above170]
str(example[c("name","height")])
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$height
c(175, 166, 170, 160) >= 170
example$name[pick_above170]
str(example[c("name","height")])
pick_above170 <- example$height >= 170
example$height
c(175, 166, 170, 160) >= 170
#相當於
example$name[c(T, F, T, F)]
example$name[pick_above170]
pick_above170 <- example$height >= 170
example$height
example$height
c(175, 166, 170, 160) >= 170
example$height
c(175, 166, 170, 160) >= 170
#相當於
example$name[c(T, F, T, F)]
example$name[pick_above170]
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
source("https://www.dropbox.com/s/qsrw069n94k61lj/transcript100to103_list.R?dl=1")
str(transcript100to103)
# 各學屆2年級人數
table(transcript100to103$`學屆`)#table適用可以分類、數數量的類別資料
# 各學屆2年級成績大於85年數
table(transcript100to103$`學屆`[pick_above85])
# 各學屆2年級人數
table(transcript100to103$`學屆`)#table適用可以分類、數數量的類別資料
# 各學屆2年級成績大於85人數
table(transcript100to103$`學屆`[pick_above85]) #想要創造出來pick這項
# 只要成績大於85的
pick_above85 <-
transcript100to103$`成績` > 85
# 各學屆2年級人數
table(transcript100to103$`學屆`)
# 各學屆2年級人數
table(transcript100to103$`學屆`)#table適用可以分類、數數量的類別資料
# 只要成績大於85的
pick_above85 <- transcript100to103$`成績` > 85
# 各學屆2年級成績大於85人數
table(transcript100to103$`學屆`[pick_above85])
example$birthday
str(example[c("name","height")])
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
example$birthday
class(example$birthday)
typeof(example$birthday)
example$birthday
class(example$birthday)
typeof(example$birthday)
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")    #要比較的雙方，一定要是同一個class，因此使用lubridate 轉成Date class
example$name[pick_after98]
print(example[c("name","birthday")])
pick_after98 <- example$birthday >= lubridate::ymd("1998-01-01")    #要比較的雙方，一定要是同一個class，因此使用lubridate 轉成Date class
example$name[pick_after98]
source("https://www.dropbox.com/s/16h6ggua6qtydci/exchangeRate.R?dl=1")
str(exchangeRate)
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
library(lubridate)
# 只要1998年1月（含）以後的
pick_after98_01 <-
exchangeRate$`期間` >= ymd("1998-01-01")
library(lubridate)
# 只要1998年1月（含）以後的
pick_after98_01 <-
exchangeRate$`期間` >= ymd("1998-01-01")
library(lubridate)
# 只要1998年1月（含）以後的
pick_after98_01 <-
exchangeRate$`期間` >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
library(lubridate)
# 只要1998年1月（含）以後的
pick_after98_01 <-
exchangeRate$`期間` >= ymd("1998-01-01")
exchangeRate_after98 <-
list(
`期間`=exchangeRate$`期間`[pick_after98_01],
`幣別`=exchangeRate$`幣別`[pick_after98_01],
`匯率`=exchangeRate$`匯率`[pick_after98_01]
)
print(example[c("name","allowance")])
print(example[c("name","allowance")])
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
levels(example$allowance)
levels(example$allowance)    #先確認此level順序就是我們想要的排序
example$allowance <- ordered(example$allowance)
class(example$allowance)
example$allowance <- ordered(example$allowance)
class(example$allowance)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]    #類別資料比大小是沒有意義的
print(example[c("name","allowance")])   # allowance的class為factor
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]    #類別資料比大小是沒有意義的
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
example$name[pick_allowanceOver1000]
example$allowance <-
factor(
example$allowance,
levels=c("0-1000", "1001-2000", "2000+"),
#若原本level的排序不是我們要的，可從這裡自行調整排序
ordered = T    #設定為可排序factor
)
pick_allowanceOver1000 <- example$allowance >= "1001-2000"
example$name[pick_allowanceOver1000]
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
str(list_victimAges_female)
View(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`)
sum(list_victimAges_female$`數目`, na.rm=T)
jsonlite::fromJSON("https://www.dropbox.com/s/3uijub7xheib405/list_victimAges_female.json?dl=1", simplifyDataFrame = F) -> list_victimAges_female
list_victimAges_female$`數目` <-
as.integer(list_victimAges_female$`數目`)
list_victimAges_female$`年齡層` <-
as.factor(list_victimAges_female$`年齡層`)
levels(list_victimAges_female$`年齡層`) -> levels_ages
print(levels_ages)
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$年齡層) <- levels_new
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$`年齡層`) <- levels_new
levels_new <- c(levels_ages[c(12,13,1,8,2:7,9:11)])
levels(list_victimAges_female$`年齡層`) <- levels_new
sum(list_victimAges_female$`數目`, na.rm=T)
sum(list_victimAges_female$`數目`[pick_above30], na.rm = T)
# 先將類別資料設定成可排序類別資料
list_victimAges_female$`年齡層` <-
ordered(list_victimAges_female$`年齡層`)
pick_above30 <-
list_victimAges_female$`年齡層` >= "30_39歲"
# 先將類別資料設定成可排序類別資料
list_victimAges_female$`年齡層` <-
ordered(list_victimAges_female$`年齡層`)
pick_above30 <-
list_victimAges_female$`年齡層` >= "30_39歲"
sum(list_victimAges_female$`數目`, na.rm=T)
sum(list_victimAges_female$`數目`[pick_above30], na.rm = T)
sum(list_victimAges_female$`數目`, na.rm=T)
sum(list_victimAges_female$`數目`[pick_above30], na.rm = T)
# 先將類別資料設定成可排序類別資料
list_victimAges_female$`年齡層` <-
ordered(list_victimAges_female$`年齡層`)
pick_above30 <-
list_victimAges_female$`年齡層` >= "30_39歲"
sum(list_victimAges_female$`數目`, na.rm=T)
sum(list_victimAges_female$`數目`[pick_above30], na.rm = T)
# 先將類別資料設定成可排序類別資料
list_victimAges_female$`年齡層` <-
ordered(list_victimAges_female$`年齡層`)
pick_above30 <-
list_victimAges_female$`年齡層` >= "30_39歲"
sum(list_victimAges_female$`數目`, na.rm=T)
sum(list_victimAges_female$`數目`[pick_above30], na.rm = T)
sum(list_victimAges_female$`數目`) #當項目裡含有缺失值時，無法做計算
sum(list_victimAges_female$`數目`, na.rm=T)

str(get2)
# get1 取出 "teacher"
get1$`108-1` -> get1_layer1
get1_layer1[[1]] -> get1_layer2
get1$`108-1` -> get1_layer1 ; get1_layer1  #layer1 只有一個未命名物件
get1_layer1[[1]] -> get1_layer2 ; get1_layer2
str(get1_layer1)
str(get1_layer2)
get1_layer2$teacher
get1_layer2$teacher
listExample[["學期"]]$`108-1`[[1]]$teacher
**
listExample[["學期"]]$`108-1`[[1]]$teacher
str(get2)
get2[["學期"]] -> get2_layer1    #等同於get2[[1]]
str(get2_layer1)
str(get2_layer1)
get2$`108-1` -> get2_layer2
str(get2_layer2)
get2$`108-1` -> get2_layer2
str(get2_layer2)
get2_layer1$`108-1` -> get2_layer2
get2[["學期"]] -> get2_layer1    #等同於get2[[1]]
get2_layer1$`108-1` -> get2_layer2
str(get2_layer2)
get2_layer2[[1]] -> get2_layer3    #layer3 有三個命名物件
str(get2_layer3)
get2_layer3$teacher
listExample["學期"][["學期"]]$`108-1`[[1]]$teacher
vector1 <- c(a=1,b=3,c=4)
vector1[["a"]]
vector1[c("a","c")]
vector1$a    #不能用
list1 <- list(a=1,b=3,c=4)
list1[["a"]]
list1[c("a","c")]
list1$a
today <- list(
list("台北市",
c(highest_temp = 25),
c(lowest_temp = 18)
),
list("新北市",
c(highest_temp = 24),
c(lowest_temp = 15)
)
)
str()
today <- list(
list("台北市",
c(highest_temp = 25),
c(lowest_temp = 18)
),
list("新北市",
c(highest_temp = 24),
c(lowest_temp = 15)
)
)
str(today)
today <- list(
list("台北市",
c(highest_temp = 25),    #atomic vector with named element
c(lowest_temp = 18)
),
list("新北市",
c(highest_temp = 24),
c(lowest_temp = 15)
)
)
str(today)
today[[1]][[2]]    #layer1有兩個為命名物件，選第一個-->台北市
str(today)
tomorrow <- list(
list("台北市",
c(highest_temp = 25),
c(lowest_temp = 18)
),
list("新北市",
c(highest_temp = 24),
c(lowest_temp = 15)
)
)
weather <- list(today,tomorrow)
print(weather)
weather <- list(today,tomorrow)
str(weather)
weather[[1]][[2]]$highest_temp # 今天/新北市/highest_temp
today <- list(
list("台北市",
highest_temp= c(highest_temp = 25),
lowest_temp= c(lowest_temp = 18)
),
list("新北市",
highest_temp= c(highest_temp = 24),
lowest_temp= c(lowest_temp = 15)
)
)
str(today)
tomorrow <- list(
list("台北市",
highest_temp= c(highest_temp = 25),
lowest_temp= c(lowest_temp = 18)
),
list("新北市",
highest_temp= c(highest_temp = 24),
lowest_temp= c(lowest_temp = 15)
)
)
str(tomorrow)
str(today)
str(today)
today[[1]]$highest_temp
today[[1]]$highest_temp    #選擇物件元素，等同於[[1]][[2]]
tomorrow[[2]]$lowest_temp
today[[1]]$highest_temp    #選擇物件元素，等同於[[1]][[2]]
str(tomorrow)
a <- c("1","b","TRUE")
a
a[[2]] <- "c"    #元素存在：替換
a[[4]] <- "7"    #元素不存在：增加
a[c(5,6)] <- c("J", "K")
a
a
#增加一個“Johnson”使用[[.]]<-
a[[7]] <- "Johnson"
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
a
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
a
a
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
# 更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
str(list1)
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
str(list1)
str(list1)
#替Mary依Jack的記錄方式增加身高163，體重45
list1[[2]]$status <- c(height=163, weight=45)
str(list1)
#將Jack的身高改成176
list1[[1]]$status <- c(height=176, weight=80)
str(list1)
#將Jack的身高改成176
list1[[1]]$status <- c(height=176, weight=80)
list1[[1]]$status[["height"]] <- 176    #兩種表達方式都可以
#將Jack的身高改成176
list1[[1]]$status <- c(height=176, weight=80)
str(list1)
list1[[1]]$status[["height"]] <- 176    #兩種表達方式都可以
str(list1)
list1[[1]][["age"]] <- 21
str(list1)
list1[[2]]["age"] <- list(21)
str(list1)
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)
#母層結構為list
str(list1)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
#有多少位置可選：
length(listExample)
str(listExample)
listExample$學期[["108-1"]][[1]]
listExample$學期[["108-1"]][[1]]
listExample$學期$`108-1`[[2]] <- list(name="產業經濟學",
teacher="Wen",
grade=88)
str(listExample)
str(listExample)
#解法一：
str(listExample)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
length(listExample)    #有多少位置可選
str(listExample)
listExample$`學期`$`108-1`[[2]] <-list(
name="產業經濟學"
)
str(listExample)
print(a)
a <- c("1","b","TRUE")
a
a[[2]] <- "c"    #第二個 元素存在：替換
a[[4]] <- "7"    #第四個 元素不存在：增加
a[c(5,6)] <- c("J", "K")    #使用[一個括號]來一次選取多個元素
a
#1. 增加一個“Johnson”使用[[.]] <-
a[[7]] <- "Johnson"
a
#2. 使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a                #表 a <- c(C(原本的7個值...),Mary)
# Mary 這個值會無限疊代/增生
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
print(a)
a <- c("1","b","TRUE")
a
a[[2]] <- "c"    #第二個 元素存在：替換
a[[4]] <- "7"    #第四個 元素不存在：增加
a[c(5,6)] <- c("J", "K")    #使用[一個括號]來一次選取多個元素
a
#1. 增加一個“Johnson”使用[[.]] <-
a[[7]] <- "Johnson"
a
#2. 使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a                #表 a <- c(C(原本的7個值...),Mary)
# Mary 這個值會無限疊代/增生
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
print(a)
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
a <- c("1","b","TRUE")
a
a[[2]] <- "c"    #第二個 元素存在：替換
a[[4]] <- "7"    #第四個 元素不存在：增加
a[c(5,6)] <- c("J", "K")    #使用[一個括號]來一次選取多個元素
a
#1. 增加一個“Johnson”使用[[.]] <-
a[[7]] <- "Johnson"
a
#2. 使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a                #表 a <- c(C(原本的7個值...),Mary)
# Mary 這個值會無限疊代/增生
print(a)
a[-c(1,3)]
print(a)
print(a)
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)]
a[c(-2)]
a[-c(1,3)]
a[c(-2)]
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
print(a)
a[-c(2)] -> a
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
a[-c(2)] -> a
print(a)
a <- c("1","b","TRUE")
a
a[[2]] <- "c"    #第二個 元素存在：替換
a[[4]] <- "7"    #第四個 元素不存在：增加
a[c(5,6)] <- c("J", "K")    #使用[一個括號]來一次選取多個元素
a
#1. 增加一個“Johnson”使用[[.]] <-
a[[7]] <- "Johnson"
a
#2. 使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a                #表 a <- c(C(原本的7個值...),Mary)
# Mary 這個值會無限疊代/增生
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
print(a)
a <- c("1","b","TRUE")
a
a[[2]] <- "c"    #第二個 元素存在：替換
a[[4]] <- "7"    #第四個 元素不存在：增加
a[c(5,6)] <- c("J", "K")    #使用[一個括號]來一次選取多個元素
a
#1. 增加一個“Johnson”使用[[.]] <-
a[[7]] <- "Johnson"
a
#2. 使用前一章的向量疊代(recursive vector concatenate)法，新增一個“Mary”
a <- c(a,"Mary") #指vector本身是用'他自己'跟新的元素疊在一起所產生的
a                #表 a <- c(C(原本的7個值...),Mary)
# Mary 這個值會無限疊代/增生
print(a)
a[-c(1,3)] -> a    #要回存才算真的刪除
print(a)
a[-c(2)] -> a
print(a)
print(a)
str(list1)
listExample <-
list(
student="小明",
`學期`=list(
`108-1`=list(
list(
name="個體經濟學",
teacher="Alice",
grade=85
)
),
`108-2`=list(
list(
name="總體經濟學",
teacher="Mark",
grade=78
)
)
)
)
length(listExample)    #有多少位置可選
str(listExample)
#解法一：
str(listExample)
listExample$`學期`$`108-1`[[2]] <-list(
name="產業經濟學"
)
str(listExample)
listExample$`學期`$`108-1`[[2]][c("teacher","grade")] <- list(
"Wen",
88
)
str(listExample)
library(lubridate)
list1 <-
list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
)
)
str(list1)
#更改日期
list1[[1]]$birthday <- ymd("1997-03-21")
str(list1)
#新增資料
list1[[2]] <- list(
name="Mary",
birthday=ymd("1998-08-24")
)
str(list1)
#替Mary依Jack的記錄方式增加身高163，體重45
list1[[2]]$status <- c(height=163, weight=45)
str(list1)
#將Jack的身高改成176
list1[[1]]$status <- c(height=176, weight=80)
list1[[1]]$status[["height"]] <- 176    #兩種表達方式都可以
str(list1)
str(list1)
list1[[1]][["age"]] <- 21
str(list1)
list1[[2]]["age"] <- list(21)    #母層結構為list
str(list1)
#改變「一個」元素值時，使用[[ ]]比較不會錯
list1[[1]][c("bloodType","registered")] <- list("AB",TRUE)
#母層結構為list
str(list1)
str(list1)
library(lubridate)
list1 <- list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
),
list(
name="Mary",
birthday=ymd("1998-08-24"),
status=c(height=163, weight=45),
age=21,
bloodType="AB"
)
)
str(list1)
library(lubridate)
list1 <- list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
),
list(
name="Mary",
birthday=ymd("1998-08-24"),
status=c(height=163, weight=45),
age=21,
bloodType="AB"
)
)
str(list1)
list1[[1]][-3] -> list1
str(list1)
library(lubridate)
list1 <- list(
list(
name="Jack",
birthday=ymd("1998-03-21"),
status=c(height=177, weight=80)
),
list(
name="Mary",
birthday=ymd("1998-08-24"),
status=c(height=163, weight=45),
age=21,
bloodType="AB"
)
)
str(list1)
list1[[1]][-3] -> list1[[1]]    #小心回存的位置
str(list1)
list1[[2]][-c(3,5)] -> list1[[2]]
str(list1)
str(list1)
list1[[2]][c(1,2)] <- NULL
str(list1)
jsonlite::fromJSON("https：//api.github.com/repots/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F) -> githubCommit
jsonlite::fromJSON("https：//api.github.com/repots/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F) -> githubCommit
jsonlite::fromJSON("https：//api.github.com/repos/tpemartin/108-2-56-inclass-practice/commits", simplifyDataFrame = F) -> githubCommit
library(jsonlite)

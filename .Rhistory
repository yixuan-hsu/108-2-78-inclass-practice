levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$`學年度` <- factor(
studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))),ordered=TRUE
)
studentHeights$`年齡` <- factor(
studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))),ordered=TRUE
)
class(studentHeights$`學年度`)
class(studentHeights$`年齡`)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,ordered=TRUE
)
level_age_names <- levels(studentHeights$`年齡層`)
level_age_names
start_Ages <- stringr::str_extract(level_age_names,"^[0-9]+")
start_Ages <- as.integer(start_Ages)
names(start_Ages) <- level_age_names
sort(start_Ages) -> start_Ages
start_Ages
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,level=names(start_Ages)
)
levels(studentHeights$`年齡層`)
class(studentHeights$`年齡層`)
studentHeights$`年齡層`
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,ordered=TRUE
)
level_age_names <- levels(studentHeights$`年齡層`)
level_age_names
start_Ages <- stringr::str_extract(level_age_names,"^[0-9]+")
start_Ages <- as.integer(start_Ages)
names(start_Ages) <- level_age_names
sort(start_Ages) -> start_Ages
start_Ages
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,level=names(start_Ages)
)
levels(studentHeights$`年齡層`)
class(studentHeights$`年齡層`)
studentHeights$`年齡層`
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,ordered=TRUE
)
level_age_names <- levels(studentHeights$`年齡層`)
level_age_names
start_Ages <- stringr::str_extract(level_age_names,"^[0-9]+")
start_Ages <- as.integer(start_Ages)
names(start_Ages) <- level_age_names
sort(start_Ages) -> start_Ages
start_Ages
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,level=names(start_Ages)
)
levels(studentHeights$`年齡層`)
class(studentHeights$`年齡層`)
studentHeights$`年齡層`
char_age <- as.character(studentHeights$`年齡層`)
char_age
average_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "總計" &
char_age == "6-8"])
average_a
average_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "總計" &
char_age == "9-12"])
average_b
average_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "總計" &
char_age == "13-15"])
average_c
averageHeightByGroup <- c("6-8"= average_a,
"9-12"= average_b,
"13-15"= average_c)
class(averageHeightByGroup)
length(averageHeightByGroup)
averageHeightByGroup
average_male_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "6-8"])
average_female_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "6-8"])
average_male_a
average_female_a
average_male_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "9-12"])
average_female_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "9-12"])
average_male_b
average_female_b
average_male_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "13-15"])
average_female_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "13-15"])
average_male_c
average_female_c
a_minus <- average_male_a - average_female_a
a_minus
b_minus <- average_male_b - average_female_b
b_minus
c_minus <- average_male_c - average_female_c
c_minus
heightDifferenceByGroup <- c("6-8"= a_minus,
"9-12"= b_minus,
"13-15"= c_minus)
class(heightDifferenceByGroup)
length(heightDifferenceByGroup)
heightDifferenceByGroup
average_male_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "6-8"])
average_female_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "6-8"])
average_male_a
average_female_a
average_male_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "9-12"])
average_female_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "9-12"])
average_male_b
average_female_b
average_male_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "13-15"])
average_female_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "13-15"])
average_male_c
average_female_c
a_minus <- average_male_a - average_female_a
a_minus
b_minus <- average_male_b - average_female_b
b_minus
c_minus <- average_male_c - average_female_c
c_minus
heightDifferenceByGroup <- c("6-8"= a_minus,
"9-12"= b_minus,
"13-15"= c_minus)
class(heightDifferenceByGroup)
length(heightDifferenceByGroup)
heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
differentMajors
realEstateRegex <- "不動產?與?城?鄉?環?境?學?系"
class(realEstateRegex)
length(realEstateRegex)
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
currentLevels <- levels(as.factor(differentMajors))
class(currentLevels)
currentLevels
str_replace(currentLevels,bSchoolRegex,"商學院")
currentLevels
bSchoolRegex <-
"(休閒?與?運動?管?理?學?系|金融與?合?作?經?營?學?系)"
class(bSchoolRegex)
length(bSchoolRegex)
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
currentLevels
bSchoolRegex <-
"(休閒?與?運動?管?理?學?系|金融與?合?作?經?營?學?系)"
class(bSchoolRegex)
length(bSchoolRegex)
bSchoolRegex
currentLevels
differentMajors <- as.factor(differentMajors)
lsm_regex <- "休閒?與?運動?管?理?學?系"
differentMajors <- str_replace(differentMajors,lsm_regex,"休運系")
fcm_regex <- "金融與?合?作?經?營?學?系"
differentMajors <- str_replace(differentMajors,fcm_regex,"金融系")
eco_regex <- "經濟學?系"
differentMajors <- str_replace(differentMajors,eco_regex,"經濟系")
soc_regex <- "社會學?系"
differentMajors <- str_replace(differentMajors,soc_regex,"社會系")
sw_regex <- "社會?工作?學?系"
differentMajors <- str_replace(differentMajors,sw_regex,"社工系")
pap_regex <- "公共?行政?暨?政?策?學?系"
differentMajors <- str_replace(differentMajors,pap_regex,"公行系")
rebe_regex <- "不動產?與?城?鄉?環?境?學?系"
differentMajors <- str_replace(differentMajors,rebe_regex,"不動系")
class(differentMajors)
differentMajors
currentLevels
differentMajors <- as.factor(differentMajors)
lsm_regex <- "休閒?與?運動?管?理?學?系"
differentMajors <- str_replace(differentMajors,lsm_regex,"休運系")
fcm_regex <- "金融與?合?作?經?營?學?系"
differentMajors <- str_replace(differentMajors,fcm_regex,"金融系")
eco_regex <- "經濟學?系"
differentMajors <- str_replace(differentMajors,eco_regex,"經濟系")
soc_regex <- "社會學?系"
differentMajors <- str_replace(differentMajors,soc_regex,"社會系")
sw_regex <- "社會?工作?學?系"
differentMajors <- str_replace(differentMajors,sw_regex,"社工系")
pap_regex <- "公共?行政?暨?政?策?學?系"
differentMajors <- str_replace(differentMajors,pap_regex,"公行系")
rebe_regex <- "不動產?與?城?鄉?環?境?學?系"
differentMajors <- str_replace(differentMajors,rebe_regex,"不動系")
class(differentMajors)
differentMajors
bus <- "(休運系|金融系)"
school <- str_replace(differentMajors,bus,"商學院")
ss <- "(經濟系|社會系|社工系)"
school <- str_replace(school,ss,"社科院")
pa <- "(公行系|不動系)"
school <- str_replace(school,pa,"公共事務學院")
school <- as.factor(school)
class(school)
levels(school)
school
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$`學年度` <- factor(
studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))),ordered=TRUE
)
studentHeights$`年齡` <- factor(
studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))),ordered=TRUE
)
class(studentHeights$`學年度`)
class(studentHeights$`年齡`)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$`學年度` <- factor(
studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))),ordered=TRUE
)
studentHeights$`年齡` <- factor(
studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))),ordered=TRUE
)
class(studentHeights$`學年度`)
class(studentHeights$`年齡`)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
studentHeights$`學年度` <- factor(
studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))),ordered=TRUE
)
studentHeights$`年齡` <- factor(
studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))),ordered=TRUE
)
class(studentHeights$`學年度`)
class(studentHeights$`年齡`)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$`學年度` <- factor(
studentHeights$`學年度`, levels = levels(factor(as.integer(studentHeights$`學年度`))),ordered=TRUE
)
studentHeights$`年齡` <- factor(
studentHeights$`年齡`, levels = levels(factor(as.integer(studentHeights$`年齡`))),ordered=TRUE
)
class(studentHeights$`學年度`)
class(studentHeights$`年齡`)
levels(studentHeights$`學年度`)
levels(studentHeights$`年齡`)
studentHeights
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,ordered=TRUE
)
level_age_names <- levels(studentHeights$`年齡層`)
level_age_names
start_Ages <- stringr::str_extract(level_age_names,"^[0-9]+")
start_Ages <- as.integer(start_Ages)
names(start_Ages) <- level_age_names
sort(start_Ages) -> start_Ages
start_Ages
studentHeights$`年齡層` <- factor(
studentHeights$`年齡層`,level=names(start_Ages)
)
levels(studentHeights$`年齡層`)
class(studentHeights$`年齡層`)
studentHeights$`年齡層`
char_age <- as.character(studentHeights$`年齡層`)
char_age
average_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "總計" &
char_age == "6-8"])
average_a
average_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "總計" &
char_age == "9-12"])
average_b
average_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "總計" &
char_age == "13-15"])
average_c
averageHeightByGroup <- c("6-8"= average_a,
"9-12"= average_b,
"13-15"= average_c)
class(averageHeightByGroup)
length(averageHeightByGroup)
averageHeightByGroup
average_male_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "6-8"])
average_female_a <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "6-8"])
average_male_a
average_female_a
average_male_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "9-12"])
average_female_b <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "9-12"])
average_male_b
average_female_b
average_male_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "男" &
char_age == "13-15"])
average_female_c <- mean(studentHeights$`平均身高`
[studentHeights$`類別` == "女" &
char_age == "13-15"])
average_male_c
average_female_c
a_minus <- average_male_a - average_female_a
a_minus
b_minus <- average_male_b - average_female_b
b_minus
c_minus <- average_male_c - average_female_c
c_minus
heightDifferenceByGroup <- c("6-8"= a_minus,
"9-12"= b_minus,
"13-15"= c_minus)
class(heightDifferenceByGroup)
length(heightDifferenceByGroup)
heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
differentMajors
realEstateRegex <- "不動產?與?城?鄉?環?境?學?系"
class(realEstateRegex)
length(realEstateRegex)
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
currentLevels <- levels(as.factor(differentMajors))
class(currentLevels)
currentLevels
currentLevels
bSchoolRegex <-
"(休閒?與?運動?管?理?學?系|金融與?合?作?經?營?學?系)"
class(bSchoolRegex)
length(bSchoolRegex)
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
currentLevels
differentMajors <- as.factor(differentMajors)
lsm_regex <- "休閒?與?運動?管?理?學?系"
differentMajors <- str_replace(differentMajors,lsm_regex,"休運系")
fcm_regex <- "金融與?合?作?經?營?學?系"
differentMajors <- str_replace(differentMajors,fcm_regex,"金融系")
eco_regex <- "經濟學?系"
differentMajors <- str_replace(differentMajors,eco_regex,"經濟系")
soc_regex <- "社會學?系"
differentMajors <- str_replace(differentMajors,soc_regex,"社會系")
sw_regex <- "社會?工作?學?系"
differentMajors <- str_replace(differentMajors,sw_regex,"社工系")
pap_regex <- "公共?行政?暨?政?策?學?系"
differentMajors <- str_replace(differentMajors,pap_regex,"公行系")
rebe_regex <- "不動產?與?城?鄉?環?境?學?系"
differentMajors <- str_replace(differentMajors,rebe_regex,"不動系")
class(differentMajors)
differentMajors
bus <- "(休運系|金融系)"
school <- str_replace(differentMajors,bus,"商學院")
ss <- "(經濟系|社會系|社工系)"
school <- str_replace(school,ss,"社科院")
pa <- "(公行系|不動系)"
school <- str_replace(school,pa,"公共事務學院")
school <- as.factor(school)
class(school)
levels(school)
school
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_`小新` <- example$name == "小新"
pick_`小新` <- example$name == "小新"
`pick_小新` <- example$name == "小新"
data_selected <-
list(
name=example$name[`pick_小新`],
weight=example$weight[`pick_小新`],
height=example$height[`pick_小新`],
hobby=example$hobby[`pick_小新`],
residence=example$residence[`pick_小新`],
allowance=example$allowance[`pick_小新`],
bloodType=example$bloodType[`pick_小新`]
)
nnames(example)
names(example)
data_selected <-
list(
name=example$name[`pick_小新`],
weight=example$weight[`pick_小新`],
height=example$height[`pick_小新`],
hobby=example$hobby[`pick_小新`],
residence=example$residence[`pick_小新`],
allowance=example$allowance[`pick_小新`],
bloodType=example$bloodType[`pick_小新`]
)
`pick_小新` <- example$name == "小新"
data_selected <-
list(
name=example$name[`pick_小新`],
weight=example$weight[`pick_小新`],
height=example$height[`pick_小新`],
hobby=example$hobby[`pick_小新`],
residence=example$residence[`pick_小新`],
allowance=example$allowance[`pick_小新`],
bloodType=example$bloodType[`pick_小新`]
)
rm(data_selected)
rm(data_selected)
#操作時，先把之前所跑的物件remove掉，換試試看另一種指令執行
map(example, ~.x[pick_小新]) -> data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
str(dance)
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
map(dance, ~.x$title) -> list_titles
View(list_titles)    # View() 等同於右上視窗中的放大鏡功能
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
View(dance)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)   #照以前的方式我們要重複這個指令做34次
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
map(dance[[4]]$showInfo, ~ .x$time) -> list_showTimes_dance4
View(list_showTimes_dance4)
View(dance)
map(dance[[8]]$showInfo, ~.x$time)
map(dance[[8]]$showInfo, ~.x$location)
map(example, ~.x[pick_小新]) -> data_selected
data_selected
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/0EE4E6BF-CEE6-4EC8-8FE1-71F544015127/json/preview", simplifyDataFrame = F) -> busRoutes
View(busRoutes)
map(busRoutes, ~ .x$Id)
map(busRoutes, ~ .x$providerId)
map(busRoutes, ~ .x$providerName)
map(busRoutes, ~ .x$Id)
map(busRoutes, ~ .x$providerId)
map(busRoutes, ~ .x$providerName)
map(busRoutes, ~ .x$nameZh)
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") -> weather_next36hours
View(weather_next36hours)
locationName <-
weather_next36hours$cwbopendata$dataset$location$locationName
weather_next36hours$cwbopendata$dataset$location$weatherElement[[1]]$elementName
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$elementName)
starttime <- map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
endtime <- map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
highesttemp <- map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$parameter$parameterValue)
#(1.)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$startTime)
#(2.)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$endTime)
#(3.)
map(weather_next36hours$cwbopendata$dataset$location$weatherElement,~.x$time[[1]]$parameter$parameterValue)

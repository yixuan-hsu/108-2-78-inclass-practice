pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
class(mention_duan)
length(mention_duan)
class(mention_duan)
length(mention_duan)
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(unlist(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)"))
mention_duan <- str_extract_all(unlist(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)"))
mention_duan <- str_extract_all(unlist(context_picked_split[[1]]),"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
table_duan <- table(unlist(mention_duan))
table_duan
View(mention_duan)
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"?=(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄|段兄弟|段大哥|段相公|段君|姓段的小子)")
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?段(譽|兄|兄弟|大哥|相公|君|的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"[姓]?段(譽|兄弟|兄|大哥|相公|君|的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
mention_duan
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
class(context_picked_split)
context_picked_split
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
class(mention_duan)
length(mention_duan)
mention_duan
mention_duan
table_duan <- table(unlist(mention_duan))
table_duan
class(table_duan)
table_duan <- table(unlist(mention_duan))
class(table_duan)
table_duan
table_duan <- table(unlist(mention_duan))
class(table_duan)
table_duan
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- "(?!弟)"
class(back_regex)
str_view_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
context_picked
str(semiGodsSemiDevils)
pick <- semiGodsSemiDevils$data[[1]]$section=="P2"
pick
context_picked <- semiGodsSemiDevils$data[[1]]$text[pick]
class(context_picked)
context_picked
textExample <- c("段1......。　　段2....。")
context_picked_split <- str_split(context_picked, "\\s\\s")
class(context_picked_split)
str(context_picked_split)
context_picked_split
mention_duan <- str_extract_all(context_picked_split[[1]],"(段譽|段兄弟|段兄|段大哥|段相公|段君|姓段的小子)")
class(mention_duan)
length(mention_duan)
mention_duan
table_duan <- table(unlist(mention_duan))
class(table_duan)
table_duan
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(str_sub(char2,1,1)
)
sort(str_sub(char2,2,2)
)
library(stringr)
sort(str_sub(char2,1,1)    #利用str_sub 取出第1位到第1位(1,1)的字元
)                     #再利用sort 排序(從小排到大)
sort(str_sub(char2,2,2)
)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(str_sub(char2,1,1)    #利用str_sub 取出第1位到第1位(1,1)的字元
)                     #再利用sort 排序(從小排到大)
sort(str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
View(covid19)
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <- factor(covid19$`縣市`)  #從原本字串class轉成factor
covid19$`性別` <- factor(covid19$`性別`)
covid19$`是否為境外移入`<- factor(covid19$`是否為境外移入`)
# 不可排序類別：性別、縣市、是否境外移入
covid19$`縣市` <- factor(covid19$`縣市`)  #從原本字串class轉成factor
covid19$`性別` <- factor(covid19$`性別`)
covid19$`是否為境外移入`<- factor(covid19$`是否為境外移入`)
levels(covid19$`縣市`)
levels(covid19$`性別`)
levels(covid19$`是否為境外移入`)
# 可排序類別資料：年齡層
covid19$`年齡層` <- factor(covid19$`年齡層`,
ordered=TRUE         #可排序
)
covid19$`年齡層`
levels(covid19$`年齡層`)
levels(covid19$`性別`)
covid19$`性別` <- factor(covid19$`性別`, c("男","女"))
levels(covid19$`性別`)
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population)    #判斷出是named integer vector
names(population)    #元素名稱是台灣各縣市
names(population)    #元素名稱是台灣各縣市 (為數字(integer)命名)
levels(covid19$`縣市`)    #是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$`縣市`) -> levelsInData
population[levelsInData] -> population
population[levelsInData] -> population
population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels <- names(population)    #縣市名是命名過後的名稱
newLevels
covid19$`縣市` <-
factor(
covid19$`縣市`, levels=newLevels
)
levels(covid19$`縣市`)
table(covid19$`縣市`)
table(covid19$`縣市`)
covid_num
covid_num <- table(covid19$`縣市`)
covid_num
covid_num <- sort(covid_num, decreasing=T)
covid_num
covid_num <- table(covid19$`縣市`)
covid_num
covid_num <- sort(covid_num, decreasing=T)
covid_num
new_covid19_Levels <- names(covid_num)
new
new_covid19_Levels
covid19$`縣市` <- factor(covid19$`縣市`, levels=new_covid19_Levels)
levels(covid19$`縣市`)
levels(covid19$`縣市`)
covid19$`縣市` <- factor(
covid19$`縣市`, levels=newLevels     #使用自訂排序
)
levels(covid19$`縣市`)
covid19$`縣市` <- factor(covid19$`縣市`, levels=new_covid19_Levels)
levels(covid19$`縣市`)
covid_num <- table(covid19$`縣市`)
covid_num
covid_num <- table(covid19$`縣市`)
covid_num
covid_num <- sort(covid_num, decreasing=T)
covid_num
new_covid19_Levels <- names(covid_num)
new_covid19_Levels
covid19$`縣市` <- factor(covid19$`縣市`, levels=new_covid19_Levels)
levels(covid19$`縣市`)
levels(covid19$`年齡層`)
level_names <- levels(covid19$`年齡層`)
startingAges <- stringr::str_extract(     #使用*萃取*指令
level_names,
"^[0-9]+"    # regex：^(表開頭)的一串數字
)
startingAges <- stringr::str_extract(     #使用*萃取*指令
level_names,
"^[0-9]+"    # regex：^(表開頭)的一串數字
)
startingAges
startingAges  # vector class
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
startingAges
names(startingAges) <- level_names   # names() <- *表示為這物件取名
startingAges
startingAges
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
startingAges
names(startingAges) <- level_names   # names() <- *表示為這物件取名
startingAges
level_names <- levels(covid19$`年齡層`)
level_names
startingAges     #依據level_names的結果來替startingAges 取名完成
sort(startingAges) -> startingAges
sort(startingAges) -> startingAges
startingAges
class(star)
class(startingAges)
startingAges     # integer class
covid19$`年齡層` <- factor(
covid19$`年齡層`,
names(startingAges)
)
levels(covid19$`年齡層`)
covid19$`年齡層` <- factor(
covid19$`年齡層`,
level=names(startingAges)
)
levels(covid19$`年齡層`)
levels(covid19$`年齡層`)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1) <- c("優","佳","尚可","普")  #可替一整個*類別*改名稱
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor_taiwan <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor_taiwan
factor_taiwan
levels(factor_taiwan) <-c(
"中部","北部","北部","中部","北部","中部")
factor_taiwan
factor_age <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor_age
levels(factor_age) <- c("0-9歲","10歲以上","0-9歲")
factor_age
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
currentLevels
covid19$`地區` <- covid19$`縣市`
levels(covid19$`地區`)
currentLevels <- levels(covid19$`地區`)
currentLevels
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
newLevels
levels(covid19$`地區`) <- newLevels
covid19$`地區`
factor_age <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor_age
levels(factor_age) <- c("0-9歲","10歲以上","0-9歲")
factor_age
levels(covid19$`年齡層`)
start
levels(covid19$`年齡層`)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) #序列sequence：seq(start,end,by=間隔多少)
#由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
start
end
middleLevels <- rep(paste0(start,"-",end),
each=2)  #每個新間距要2個
#即"5-9","10-14"(2個)都要表示成為"5-14"
middleLevels
middleLevels <- rep(       # repeat：rep(向量內容,each=要重複幾次)
paste0(start,"-",end),
each=2)    #每個新間距要2個
#即"5-9","10-14" (2個)都要表示成為"5-14"
middleLevels
newLevels <- c("4", middleLevels, "65+", "65+")
middle_age_Levels <- rep(       # repeat：rep(向量內容,each=要重複幾次)
paste0(start,"-",end),
each=2)    #每個新間距要2個
#即"5-9","10-14" (2個)都要表示成為"5-14"
middle_age_Levels
new_age_Levels <- c("4", middle_age_Levels, "65+", "65+")
#即"5-9","10-14" (2個)都要表示成為"5-14"
middle_age_Levels
new_age_Levels <- c("4", middle_age_Levels, "65+", "65+")
levels(covid19$`年齡層`) <- newLevels
levels(covid19$`年齡層`) <- new_age_Levels
new_age_Levels
levels(covid19$`年齡層`) <- new_age_Levels
covid19$`年齡層`
covid19$`年齡層`
levels(covid19$`年齡層`)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) #序列sequence：seq(start,end,by=間隔多少)
#由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
start
end
middle_age_Levels <- rep(       # repeat：rep(向量內容,each=要重複幾次)
paste0(start,"-",end),
each=2)    #每個新間距要2個
#即"5-9","10-14" (2個)都要表示成為"5-14"
middle_age_Levels
new_age_Levels <- c("4", middle_age_Levels, "65+", "65+")
new_age_Levels
levels(covid19$`年齡層`) <- new_age_Levels
covid19$`年齡層`
levels(covid19$`年齡層`)
levels(covid19$`年齡層`) <- new_age_Levels
covid19$`年齡層`
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
levels(covid19$`年齡層`)    #電腦排序有誤，需自行更改
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
newLevels <- names(population)    #縣市名是命名過後的名稱
newLevels
levels(covid19$`年齡層`)    #電腦排序有誤，需自行更改
# 可排序類別資料：年齡層
covid19$`年齡層` <- factor(covid19$`年齡層`,
ordered=TRUE         #可排序
)
covid19$`年齡層`
levels(covid19$`年齡層`)     #電腦排序有誤，需自行更改
levels(covid19$`年齡層`)    #電腦排序有誤，需自行更改
level_names <- levels(covid19$`年齡層`)
level_names
startingAges <- stringr::str_extract(     #使用*萃取*指令
level_names,
"^[0-9]+"    # regex：^(表開頭)的一串數字
)
startingAges  # vector (character) class
#依數據重排類別小技巧，善用named vector(numeric class)
#因此需要更改 class
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
startingAges
names(startingAges) <- level_names   # names() <- *表示為這物件取名
startingAges     #依據level_names的結果來替startingAges 取名完成
sort(startingAges) -> startingAges
startingAges     # integer class
covid19$`年齡層` <- factor(
covid19$`年齡層`,
level=names(startingAges)    #只取出startingAges 所被命名的名稱
)
levels(covid19$`年齡層`)
factor_age <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor_age
levels(factor_age) <- c("0-9歲","10歲以上","0-9歲")
factor_age
levels(covid19$`年齡層`)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) #序列sequence：seq(start,end,by=間隔多少)
#由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
start
end
middle_age_Levels <- rep(    # repeat：rep(向量內容,each=要重複幾次)
paste0(start,"-",end),
each=2)     #每個新間距要2個
#即"5-9","10-14" (2個)都要表示成為"5-14"
middle_age_Levels
new_age_Levels <- c("4", middle_age_Levels, "65+", "65+")
new_age_Levels
levels(covid19$`年齡層`) <- new_age_Levels
covid19$`年齡層`
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
加一筆新資料“差”（之前沒有這類）
```{r}
factor2[[6]] <- "差"
factor2 # 元素6變NA
```
factor2[[6]] <- "差"
factor2 # 元素6變NA
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
#或是也可用以下方法
levels(factor2)[[4]] <- "尚可"
factor2
#或是也可用以下方法
levels(factor2)[[4]] <- "尚可"
factor2[[7]] <- "尚可"
factor2
# factor
factor3 <- factor(c("好", "壞", "壞"))
factor4 <- factor(c("壞", "好", "好"))
c(factor3, factor4)
factor3[4:6] <- factor4    #元素創造--創造原本不存在的第4項到第6項
factor3
factor3
forcats::fct_c(factor1, factor2)
forcats::fct_c(factor3, factor4)
garbageRoutes$route <- factor(
str_extract(garbageRoutes$linename,"[:alnum:]+路線")
)
jsonlite::fromJSON("https://data.ntpc.gov.tw/od/data/api/EDC3AD26-8AE7-4916-A00B-BC6048D19BF8?$format=json") -> garbageRoutes
garbageRoutes$route <- factor(
str_extract(garbageRoutes$linename,"[:alnum:]+路線")
)
new_levels <- names(sort(table(garbageRoutes$route)))
levels(garbageRoutes$route) <- new_levels
garbageRoutes$route <- factor(
str_extract(garbageRoutes$linename,"[:alnum:]+路線")
)
new_levels <- names(sort(table(garbageRoutes$route)))
levels(garbageRoutes$route) <- new_levels
garbageRoutes$time <-
str_extract(garbageRoutes$linename,"(?<=線)[:graph:]+")
garbageRoutes$time[is.na(garbageRoutes$time)] <- "全天"
garbageRoutes$time <- factor(garbageRoutes$time)
levels(garbageRoutes$time)[[3]] <- "下午"

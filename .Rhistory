"W"}
)-> letterGrade
return(letterGrade)
}
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")    #次日，需加一天
)
nowtime <- glue::glue("{today()} 18:00:00") %>% ymd_hms(tz="Asia/Taipei")
library(lubridate)
library(glue)
# 建立可當cutpoints的一天時間點
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")    #次日，需加一天
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
## 將nowtime轉成它對應的時段是"morning", "evening", 或其他。
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
## 使用switch決定要做什麼事
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
whatNeedToDo_butler_mom <- function(nowtime=now()){
library(lubridate)
library(glue)
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
switch(
as.character(nowtime),
"morning"={
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
},
"evening"={
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
},
"jazz time"={
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
},
{
print("機器人要休息，饒了我吧～～")
}
)
}
ymd_hms(glue::glue("{today()} 08:00:00"),tz="Asia/Taipei") %>%
whatNeedToDo_butler_mom()
ymd_hms(glue::glue("{today()} 14:00:00"),tz="Asia/Taipei") %>%
whatNeedToDo_butler_mom()
whatNeedToDo_butler_mom <- function(nowtime=now())
{
library(lubridate)
library(glue)
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
nowtime=as.character(nowtime)
if(nowtime=="morning"){
print("要不要來閱讀點國際時事？")
browseURL("https://economist.com")
}
else if(nowtime=="evening"){
print("需不需要點餐呢？")
browseURL("https://www.foodpanda.com.tw/")
}
else if(nowtime=="jazz time"){
print("放鬆聽點Jazz。")
browseURL("https://open.spotify.com/playlist/37i9dQZF1DXbITWG1ZJKYt")
}
else{
print("機器人要休息，饒了我吧～～")
}
}
whatNeedToDo_butler_dad <- function(nowtime=now())
{
library(lubridate)
library(glue)
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
nowtime=as.character(nowtime)
if(nowtime=="morning"){
print("要不要來閱讀點國際時事？")
browseURL("https://www.wsj.com/")
}
else if(nowtime=="evening"){
print("需不需要規劃週末全家旅行呢？")
browseURL("https://www.tripadvisor.com/")
}
else if(nowtime=="jazz time"){
print("機器人要休息，饒了我吧～～")
}
else{
print("機器人要休息，饒了我吧～～")
}
}
whatNeedToDo_butler_ming <- function(nowtime=now())
{
library(lubridate)
library(glue)
cutpoints <-
c(
glue("{today()} 06:00:00"),
glue("{today()} 09:00:00"),
glue("{today()} 17:00:00"),
glue("{today()} 19:00:00"),
glue("{today()} 23:30:00"),
glue("{today()+days(1)} 01:00:00")
)
cutpoints %>%
ymd_hms(tz="Asia/Taipei") -> cutpoints
cut(nowtime, cutpoints) -> nowtime
levels(nowtime)[c(1,3,5)] <-
c("morning","evening","jazz time")
nowtime=as.character(nowtime)
if(nowtime=="morning"){
print("檢查書包東西都有帶嗎？")
}
else if(nowtime=="evening"){
print("作業寫好了嗎？")
}
else if(nowtime=="jazz time"){
print("機器人要休息，饒了我吧～～")
}
else{
print("機器人要休息，饒了我吧～～")
}
}
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(myAnswer == correctAnswer){    #只取用第一個T/F
print("你答對了")
}
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(all(myAnswer == correctAnswer)){    # all--要全TRUE
print("你答對了")
}
myAnswer <- c(2,3,6)
correctAnswer <- c(2,3,5)
if(all(myAnswer == correctAnswer)){    # all--要全TRUE才會被執行
print("你答對了")
}
if(any(myAnswer == correctAnswer)){    # any--只要有一個TRUE就會執行
print("裡頭有數字是對的")
}
grading = function(myAnswer, correctAnswer)
{
a=0
if(all(myAnswer == correctAnswer) && class(myAnswer) ==
class(correctAnswer))
{
a=10
}
return(a)
}
grading = function(myAnswer, correctAnswer)
{
a=0
if(all(myAnswer == correctAnswer) && class(myAnswer) ==
class(correctAnswer))
{
a=10
}
return(a)
}
myAnswer <- c(1,2,3)
correctAnswer <- factor(c(1,2,3))
if(is.factor(myAnswer) && all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}-> myGrade
myGrade
if(is.factor(myAnswer) & all(myAnswer==correctAnswer)){
print("答對了")
10
} else {
print("答錯了")
0
}-> myGrade
myGrade
myAge <- 40
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 ||  myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
myAge <- 67
myChildrenNumber <- 5
if(myAge >=65 | myChildrenNumber >3){
"符合申請資格"
} else {
warning("不符合申請資格")
}
if(myAge >=65 ||  myChildrenNumber >3){    #使用||更有效率
"符合申請資格"
} else {
warning("不符合申請資格")
}
x <- c(2,5,10,-21,3,8)
ifelse(x %% 2==0, "even", "odd")
y <- sample(40:100,20, replace=T)
dplyr::case_when(
y < 60 ~ "F",
60 <= y & y < 70 ~"D",
70 <= y & y < 80 ~"C",
80 <= y & y < 90 ~"B",
90 <= y ~ "A"
)
sampleData <- list(
list("男", 45), list("女", 32), list("男",50), list("男",33), list("女", 21)
)
# 前三筆性別
sampleData[[1]][[1]]
sampleData[[2]][[1]]
sampleData[[3]][[1]]
# 串接寫法(I): external dispatch
sampleData[[1]] %>% {.[[1]]}     # { } 僅為輔助了解
library(magrittr)
# 串接寫法(I): external dispatch
sampleData[[1]] %>% {.[[1]]}     # { } 僅為輔助了解
sampleData[[2]] %>% {.[[1]]}
sampleData[[3]] %>% {.[[1]]}
map(sampleData, ~{.x[[1]]})
library(purrr)
map(sampleData, ~{.x[[1]]})
map(sampleData, ~{.x[[1]]})
# 串接寫法(II): internal dispatch
1 %>% {sampleData[[.]][[1]]}     # [[.]]後還有東西，{ } 一定要使用
2 %>% {sampleData[[.]][[1]]}
3 %>% {sampleData[[.]][[1]]}
map(1:5, ~{sampleData[[.x]][[1]]})
# map在單維度遞迴時，.x也可以只寫.
map(1:5, ~{sampleData[[.]][[1]]})
library(stringr)
fryEgg(eggs[[1]])
fryEgg <- function(egg){
str_replace(egg, "雞蛋", "荷包蛋")
}
fryEgg(eggs[[1]])
library(stringr)
eggs <- rep("雞蛋x1", 8)
fryEgg <- function(egg){
str_replace(egg, "雞蛋", "荷包蛋")
}
fryEgg(eggs[[1]])
# external dispatch
eggs[[1]] %>% fryEgg(.)
eggs[[2]] %>% fryEgg(.)
eggs[[3]] %>% fryEgg(.)
map(eggs, ~fryEgg(.x)) -> friedEggs1
# internal dispatch
1 %>% {fryEgg(eggs[[.]])}
2 %>% {fryEgg(eggs[[.]])}
3 %>% {fryEgg(eggs[[.]])}
map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
friedEggs1
friedEggs2
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
i <- 2
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else {
"F"
}
} else {
"缺考"
}
pass_or_fail <- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"缺考"
}
}
pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])
# 可否直接input整個grade vector
warning("不是vectorised function")
pass_or_fail(grade)
grade[[1]] %>% {pass_or_fail(.)}
grade[[2]] %>% {pass_or_fail(.)}
grade[[3]] %>% {pass_or_fail(.)}
map(grade, ~{pass_or_fail(.)})      # map to list
# vector of "class character"
# vector 進去 vector 出來
map_pass_fail <- function(grade){
map_chr(grade, ~{pass_or_fail(.)})
}
map_pass_fail(grade)    #把上方結合起來，一次就可以執行多個東西
rm(grade)
map_pass_fail(c(77,43,68,NA))
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
a <- sample(1:100, 10, replace=T)
sum <- 0             #設定container
sum <- sum + a[[1]]
sum <- sum + a[[2]]
sum <- sum + a[[3]]
#改成串接形式
1 %>% {sum <- sum + a[[.]]}
2 %>% {sum <- sum + a[[.]]}
3 %>% {sum <- sum + a[[.]]}
#使用for loop迴圈
for(.x in 1:10){
sum <- sum+a[[.x]]     #儲存回container
}
print(sum)
new <- sample(0:100,1)
if(new %% 3 == 0){
output <- c(output,new)
}
#改成串接形式
1 %>% {new <- sample(0:100,1)
if(new %% 3 == 0){
output <- c(output,new)
}}
2 %>% {new <- sample(0:100,1)
if(new %% 3 == 0){
output <- c(output,new)
}}
3 %>% {new <- sample(0:100,1)
if(new %% 3 == 0){
output <- c(output,new)
}}
#使用for loop迴圈
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3 == 0){
output <- c(output, new)    #儲存回container
}
}
output <- c()        #設定container
#使用for loop迴圈
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3 == 0){
output <- c(output, new)    #儲存回container
}
}
print(output)
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))    #設定container
nameVector <- vector("character", length(collectionHWs))
#第二個學生
nameVector[[2]] <- collectionHWs[[2]][[1]]
studentAns <- collectionHWs[[2]][[2]]
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
#第二個學生
nameVector[[2]] <- collectionHWs[[2]][[1]]
studentAns <- collectionHWs[[2]][[2]]
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # 沒交作業
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))    #設定container
nameVector <- vector("character", length(collectionHWs))
#第一個學生
nameVector[[1]] <- collectionHWs[[1]][[1]]
nameVector[[1]] <- collectionHWs[[1]][[1]]
studentAns <- collectionHWs[[1]][[2]]
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
# 1st toss
count <- count +1    #計數器+1
sum <- 0        #得到幾個正面
count <- 0      #總共擲了幾次
# 1st toss
count <- count +1    #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
# 2nd toss
count <- count +1    #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
#改成串接形式
# 1st toss
1 %>% {count <- count +1    #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
}
# 2nd toss
2 %>% {count <- count +1    #計數器+1
newToss <- sample(c("正","反"), 1, replace=T)
if(newToss == "正"){
sum <- sum+1
}
}
